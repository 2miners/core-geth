{
  "openrpc": "1.2.4", 
  "info": {
    "title": "Ethereum JSON-RPC", 
    "description": "This API lets you interact with an EVM-based client via JSON-RPC", 
    "termsOfService": "https://github.com/etclabscore/core-geth/blob/master/COPYING", 
    "contact": {
      "name": "", 
      "url": "", 
      "email": ""
    }, 
    "license": {
      "name": "Apache-2.0", 
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }, 
    "version": "1.0.10-2020-04-09T11:16:26-05:00-1586448986"
  }, 
  "servers": [], 
  "methods": [
    {
      "name": "admin_addPeer", 
      "tags": [], 
      "summary": "AddPeer requests connecting to a remote node, and also maintaining the new\nconnection at all times, even reconnecting if it is lost.\n", 
      "description": "```go\n// AddPeer requests connecting to a remote node, and also maintaining the new\n// connection at all times, even reconnecting if it is lost.\nfunc (api *PrivateAdminAPI) AddPeer(url string) (bool, error) {\n\n\tserver := api.node.Server()\n\tif server == nil {\n\t\treturn false, ErrNodeStopped\n\t}\n\n\tnode, err := enode.Parse(enode.ValidSchemes, url)\n\tif err != nil {\n\t\treturn false, fmt.Errorf(\"invalid enode: %v\", err)\n\t}\n\tserver.AddPeer(node)\n\treturn true, nil\n}\n```", 
      "externalDocs": {
        "description": "line=45", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/node/api.go"
      }, 
      "params": [
        {
          "name": "url", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "admin_addTrustedPeer", 
      "tags": [], 
      "summary": "AddTrustedPeer allows a remote node to always connect, even if slots are full\n", 
      "description": "```go\n// AddTrustedPeer allows a remote node to always connect, even if slots are full\nfunc (api *PrivateAdminAPI) AddTrustedPeer(url string) (bool, error) {\n\n\tserver := api.node.Server()\n\tif server == nil {\n\t\treturn false, ErrNodeStopped\n\t}\n\tnode, err := enode.Parse(enode.ValidSchemes, url)\n\tif err != nil {\n\t\treturn false, fmt.Errorf(\"invalid enode: %v\", err)\n\t}\n\tserver.AddTrustedPeer(node)\n\treturn true, nil\n}\n```", 
      "externalDocs": {
        "description": "line=77", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/node/api.go"
      }, 
      "params": [
        {
          "name": "url", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "admin_datadir", 
      "tags": [], 
      "summary": "Datadir retrieves the current data directory the node is using.\n", 
      "description": "```go\n// Datadir retrieves the current data directory the node is using.\nfunc (api *PublicAdminAPI) Datadir() string {\n\treturn api.node.DataDir()\n}\n```", 
      "externalDocs": {
        "description": "line=295", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/node/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "string", 
        "summary": "", 
        "description": "```go\nstring\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "string", 
          "type": "string"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "admin_exportChain", 
      "tags": [], 
      "summary": "ExportChain exports the current blockchain into a local file,\nor a range of blocks if first and last are non-nil\n", 
      "description": "```go\n// ExportChain exports the current blockchain into a local file,\n// or a range of blocks if first and last are non-nil\nfunc (api *PrivateAdminAPI) ExportChain(file string, first *uint64, last *uint64) (bool, error) {\n\tif first == nil \u0026\u0026 last != nil {\n\t\treturn false, errors.New(\"last cannot be specified without first\")\n\t}\n\tif first != nil \u0026\u0026 last == nil {\n\t\thead := api.eth.BlockChain().CurrentHeader().Number.Uint64()\n\t\tlast = \u0026head\n\t}\n\tif _, err := os.Stat(file); err == nil {\n\n\t\treturn false, errors.New(\"location would overwrite an existing file\")\n\t}\n\n\tout, err := os.OpenFile(file, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, os.ModePerm)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tdefer out.Close()\n\n\tvar writer io.Writer = out\n\tif strings.HasSuffix(file, \".gz\") {\n\t\twriter = gzip.NewWriter(writer)\n\t\tdefer writer.(*gzip.Writer).Close()\n\t}\n\n\tif first != nil {\n\t\tif err := api.eth.BlockChain().ExportN(writer, *first, *last); err != nil {\n\t\t\treturn false, err\n\t\t}\n\t} else if err := api.eth.BlockChain().Export(writer); err != nil {\n\t\treturn false, err\n\t}\n\treturn true, nil\n}\n```", 
      "externalDocs": {
        "description": "line=171", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [
        {
          "name": "file", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }, 
        {
          "name": "first", 
          "summary": "", 
          "description": "```go\n*uint64\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of the integer", 
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }, 
        {
          "name": "last", 
          "summary": "", 
          "description": "```go\n*uint64\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of the integer", 
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "admin_importChain", 
      "tags": [], 
      "summary": "ImportChain imports a blockchain from a local file.\n", 
      "description": "```go\n// ImportChain imports a blockchain from a local file.\nfunc (api *PrivateAdminAPI) ImportChain(file string) (bool, error) {\n\n\tin, err := os.Open(file)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tdefer in.Close()\n\n\tvar reader io.Reader = in\n\tif strings.HasSuffix(file, \".gz\") {\n\t\tif reader, err = gzip.NewReader(reader); err != nil {\n\t\t\treturn false, err\n\t\t}\n\t}\n\n\tstream := rlp.NewStream(reader, 0)\n\n\tblocks, index := make([]*types.Block, 0, 2500), 0\n\tfor batch := 0; ; batch++ {\n\n\t\tfor len(blocks) \u003c cap(blocks) {\n\t\t\tblock := new(types.Block)\n\t\t\tif err := stream.Decode(block); err == io.EOF {\n\t\t\t\tbreak\n\t\t\t} else if err != nil {\n\t\t\t\treturn false, fmt.Errorf(\"block %d: failed to parse: %v\", index, err)\n\t\t\t}\n\t\t\tblocks = append(blocks, block)\n\t\t\tindex++\n\t\t}\n\t\tif len(blocks) == 0 {\n\t\t\tbreak\n\t\t}\n\n\t\tif hasAllBlocks(api.eth.BlockChain(), blocks) {\n\t\t\tblocks = blocks[:0]\n\t\t\tcontinue\n\t\t}\n\n\t\tif _, err := api.eth.BlockChain().InsertChain(blocks); err != nil {\n\t\t\treturn false, fmt.Errorf(\"batch %d: failed to insert: %v\", batch, err)\n\t\t}\n\t\tblocks = blocks[:0]\n\t}\n\treturn true, nil\n}\n```", 
      "externalDocs": {
        "description": "line=219", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [
        {
          "name": "file", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "admin_nodeInfo", 
      "tags": [], 
      "summary": "NodeInfo retrieves all the information we know about the host node at the\nprotocol granularity.\n", 
      "description": "```go\n// NodeInfo retrieves all the information we know about the host node at the\n// protocol granularity.\nfunc (api *PublicAdminAPI) NodeInfo() (*p2p.NodeInfo, error) {\n\tserver := api.node.Server()\n\tif server == nil {\n\t\treturn nil, ErrNodeStopped\n\t}\n\treturn server.NodeInfo(), nil\n}\n```", 
      "externalDocs": {
        "description": "line=285", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/node/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "*p2p.NodeInfo", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/p2p.*NodeInfo\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "object", 
              "properties": {
                "enode": {
                  "type": "string"
                }, 
                "enr": {
                  "type": "string"
                }, 
                "id": {
                  "type": "string"
                }, 
                "ip": {
                  "type": "string"
                }, 
                "listenAddr": {
                  "type": "string"
                }, 
                "name": {
                  "type": "string"
                }, 
                "ports": {
                  "type": "object", 
                  "properties": {
                    "discovery": {
                      "type": "string", 
                      "title": "integer", 
                      "pattern": "^0x[a-fA-F0-9]+$"
                    }, 
                    "listener": {
                      "type": "string", 
                      "title": "integer", 
                      "pattern": "^0x[a-fA-F0-9]+$"
                    }
                  }, 
                  "additionalProperties": false
                }, 
                "protocols": {
                  "type": "object", 
                  "patternProperties": {
                    ".*": {
                      "additionalProperties": true
                    }
                  }
                }
              }, 
              "additionalProperties": false
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "admin_peerEvents", 
      "tags": [], 
      "summary": "PeerEvents creates an RPC subscription which receives peer events from the\nnode's p2p.Server\n", 
      "description": "```go\n// PeerEvents creates an RPC subscription which receives peer events from the\n// node's p2p.Server\nfunc (api *PrivateAdminAPI) PeerEvents(ctx context.Context) (*rpc.Subscription, error) {\n\n\tserver := api.node.Server()\n\tif server == nil {\n\t\treturn nil, ErrNodeStopped\n\t}\n\n\tnotifier, supported := rpc.NotifierFromContext(ctx)\n\tif !supported {\n\t\treturn nil, rpc.ErrNotificationsUnsupported\n\t}\n\trpcSub := notifier.CreateSubscription()\n\n\tgo func() {\n\t\tevents := make(chan *p2p.PeerEvent)\n\t\tsub := server.SubscribeEvents(events)\n\t\tdefer sub.Unsubscribe()\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase event := \u003c-events:\n\t\t\t\tnotifier.Notify(rpcSub.ID, event)\n\t\t\tcase \u003c-sub.Err():\n\t\t\t\treturn\n\t\t\tcase \u003c-rpcSub.Err():\n\t\t\t\treturn\n\t\t\tcase \u003c-notifier.Closed():\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn rpcSub, nil\n}\n```", 
      "externalDocs": {
        "description": "line=109", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/node/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "*rpc.Subscription", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.*Subscription\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "github.com/ethereum/go-ethereum/rpc.*Subscription", 
              "type": "object", 
              "title": "subscription-ptr"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "admin_peers", 
      "tags": [], 
      "summary": "Peers retrieves all the information we know about each individual peer at the\nprotocol granularity.\n", 
      "description": "```go\n// Peers retrieves all the information we know about each individual peer at the\n// protocol granularity.\nfunc (api *PublicAdminAPI) Peers() ([]*p2p.PeerInfo, error) {\n\tserver := api.node.Server()\n\tif server == nil {\n\t\treturn nil, ErrNodeStopped\n\t}\n\treturn server.PeersInfo(), nil\n}\n```", 
      "externalDocs": {
        "description": "line=275", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/node/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "[]*p2p.PeerInfo", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "object", 
                "properties": {
                  "caps": {
                    "type": "array", 
                    "items": {
                      "type": "string"
                    }
                  }, 
                  "enode": {
                    "type": "string"
                  }, 
                  "enr": {
                    "type": "string"
                  }, 
                  "id": {
                    "type": "string"
                  }, 
                  "name": {
                    "type": "string"
                  }, 
                  "network": {
                    "type": "object", 
                    "properties": {
                      "inbound": {
                        "type": "boolean"
                      }, 
                      "localAddress": {
                        "type": "string"
                      }, 
                      "remoteAddress": {
                        "type": "string"
                      }, 
                      "static": {
                        "type": "boolean"
                      }, 
                      "trusted": {
                        "type": "boolean"
                      }
                    }, 
                    "additionalProperties": false
                  }, 
                  "protocols": {
                    "type": "object", 
                    "properties": {
                      "inbound": {
                        "type": "boolean"
                      }, 
                      "localAddress": {
                        "type": "string"
                      }, 
                      "remoteAddress": {
                        "type": "string"
                      }, 
                      "static": {
                        "type": "boolean"
                      }, 
                      "trusted": {
                        "type": "boolean"
                      }
                    }, 
                    "additionalProperties": false
                  }
                }, 
                "additionalProperties": false
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "admin_removePeer", 
      "tags": [], 
      "summary": "RemovePeer disconnects from a remote node if the connection exists\n", 
      "description": "```go\n// RemovePeer disconnects from a remote node if the connection exists\nfunc (api *PrivateAdminAPI) RemovePeer(url string) (bool, error) {\n\n\tserver := api.node.Server()\n\tif server == nil {\n\t\treturn false, ErrNodeStopped\n\t}\n\n\tnode, err := enode.Parse(enode.ValidSchemes, url)\n\tif err != nil {\n\t\treturn false, fmt.Errorf(\"invalid enode: %v\", err)\n\t}\n\tserver.RemovePeer(node)\n\treturn true, nil\n}\n```", 
      "externalDocs": {
        "description": "line=61", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/node/api.go"
      }, 
      "params": [
        {
          "name": "url", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "admin_removeTrustedPeer", 
      "tags": [], 
      "summary": "RemoveTrustedPeer removes a remote node from the trusted peer set, but it\ndoes not disconnect it automatically.\n", 
      "description": "```go\n// RemoveTrustedPeer removes a remote node from the trusted peer set, but it\n// does not disconnect it automatically.\nfunc (api *PrivateAdminAPI) RemoveTrustedPeer(url string) (bool, error) {\n\n\tserver := api.node.Server()\n\tif server == nil {\n\t\treturn false, ErrNodeStopped\n\t}\n\tnode, err := enode.Parse(enode.ValidSchemes, url)\n\tif err != nil {\n\t\treturn false, fmt.Errorf(\"invalid enode: %v\", err)\n\t}\n\tserver.RemoveTrustedPeer(node)\n\treturn true, nil\n}\n```", 
      "externalDocs": {
        "description": "line=93", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/node/api.go"
      }, 
      "params": [
        {
          "name": "url", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "admin_startRPC", 
      "tags": [], 
      "summary": "StartRPC starts the HTTP RPC API server.\n", 
      "description": "```go\n// StartRPC starts the HTTP RPC API server.\nfunc (api *PrivateAdminAPI) StartRPC(host *string, port *int, cors *string, apis *string, vhosts *string) (bool, error) {\n\tapi.node.lock.Lock()\n\tdefer api.node.lock.Unlock()\n\n\tif api.node.httpHandler != nil {\n\t\treturn false, fmt.Errorf(\"HTTP RPC already running on %s\", api.node.httpEndpoint)\n\t}\n\n\tif host == nil {\n\t\th := DefaultHTTPHost\n\t\tif api.node.config.HTTPHost != \"\" {\n\t\t\th = api.node.config.HTTPHost\n\t\t}\n\t\thost = \u0026h\n\t}\n\tif port == nil {\n\t\tport = \u0026api.node.config.HTTPPort\n\t}\n\n\tallowedOrigins := api.node.config.HTTPCors\n\tif cors != nil {\n\t\tallowedOrigins = nil\n\t\tfor _, origin := range strings.Split(*cors, \",\") {\n\t\t\tallowedOrigins = append(allowedOrigins, strings.TrimSpace(origin))\n\t\t}\n\t}\n\n\tallowedVHosts := api.node.config.HTTPVirtualHosts\n\tif vhosts != nil {\n\t\tallowedVHosts = nil\n\t\tfor _, vhost := range strings.Split(*host, \",\") {\n\t\t\tallowedVHosts = append(allowedVHosts, strings.TrimSpace(vhost))\n\t\t}\n\t}\n\n\tmodules := api.node.httpWhitelist\n\tif apis != nil {\n\t\tmodules = nil\n\t\tfor _, m := range strings.Split(*apis, \",\") {\n\t\t\tmodules = append(modules, strings.TrimSpace(m))\n\t\t}\n\t}\n\n\tif err := api.node.startHTTP(fmt.Sprintf(\"%s:%d\", *host, *port), api.node.rpcAPIs, modules, allowedOrigins, allowedVHosts, api.node.config.HTTPTimeouts, api.node.config.WSOrigins); err != nil {\n\t\treturn false, err\n\t}\n\treturn true, nil\n}\n```", 
      "externalDocs": {
        "description": "line=146", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/node/api.go"
      }, 
      "params": [
        {
          "name": "host", 
          "summary": "", 
          "description": "```go\n*string\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "*string", 
                "type": "string"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }, 
        {
          "name": "port", 
          "summary": "", 
          "description": "```go\n*int\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of the integer", 
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }, 
        {
          "name": "cors", 
          "summary": "", 
          "description": "```go\n*string\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "*string", 
                "type": "string"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }, 
        {
          "name": "apis", 
          "summary": "", 
          "description": "```go\n*string\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "*string", 
                "type": "string"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }, 
        {
          "name": "vhosts", 
          "summary": "", 
          "description": "```go\n*string\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "*string", 
                "type": "string"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "admin_startWS", 
      "tags": [], 
      "summary": "StartWS starts the websocket RPC API server.\n", 
      "description": "```go\n// StartWS starts the websocket RPC API server.\nfunc (api *PrivateAdminAPI) StartWS(host *string, port *int, allowedOrigins *string, apis *string) (bool, error) {\n\tapi.node.lock.Lock()\n\tdefer api.node.lock.Unlock()\n\n\tif api.node.wsHandler != nil {\n\t\treturn false, fmt.Errorf(\"WebSocket RPC already running on %s\", api.node.wsEndpoint)\n\t}\n\n\tif host == nil {\n\t\th := DefaultWSHost\n\t\tif api.node.config.WSHost != \"\" {\n\t\t\th = api.node.config.WSHost\n\t\t}\n\t\thost = \u0026h\n\t}\n\tif port == nil {\n\t\tport = \u0026api.node.config.WSPort\n\t}\n\n\torigins := api.node.config.WSOrigins\n\tif allowedOrigins != nil {\n\t\torigins = nil\n\t\tfor _, origin := range strings.Split(*allowedOrigins, \",\") {\n\t\t\torigins = append(origins, strings.TrimSpace(origin))\n\t\t}\n\t}\n\n\tmodules := api.node.config.WSModules\n\tif apis != nil {\n\t\tmodules = nil\n\t\tfor _, m := range strings.Split(*apis, \",\") {\n\t\t\tmodules = append(modules, strings.TrimSpace(m))\n\t\t}\n\t}\n\n\tif err := api.node.startWS(fmt.Sprintf(\"%s:%d\", *host, *port), api.node.rpcAPIs, modules, origins, api.node.config.WSExposeAll); err != nil {\n\t\treturn false, err\n\t}\n\treturn true, nil\n}\n```", 
      "externalDocs": {
        "description": "line=208", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/node/api.go"
      }, 
      "params": [
        {
          "name": "host", 
          "summary": "", 
          "description": "```go\n*string\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "*string", 
                "type": "string"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }, 
        {
          "name": "port", 
          "summary": "", 
          "description": "```go\n*int\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of the integer", 
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }, 
        {
          "name": "allowedOrigins", 
          "summary": "", 
          "description": "```go\n*string\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "*string", 
                "type": "string"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }, 
        {
          "name": "apis", 
          "summary": "", 
          "description": "```go\n*string\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "*string", 
                "type": "string"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "admin_stopRPC", 
      "tags": [], 
      "summary": "StopRPC terminates an already running HTTP RPC API endpoint.\n", 
      "description": "```go\n// StopRPC terminates an already running HTTP RPC API endpoint.\nfunc (api *PrivateAdminAPI) StopRPC() (bool, error) {\n\tapi.node.lock.Lock()\n\tdefer api.node.lock.Unlock()\n\n\tif api.node.httpHandler == nil {\n\t\treturn false, fmt.Errorf(\"HTTP RPC not running\")\n\t}\n\tapi.node.stopHTTP()\n\treturn true, nil\n}\n```", 
      "externalDocs": {
        "description": "line=196", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/node/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "admin_stopWS", 
      "tags": [], 
      "summary": "StopWS terminates an already running websocket RPC API endpoint.\n", 
      "description": "```go\n// StopWS terminates an already running websocket RPC API endpoint.\nfunc (api *PrivateAdminAPI) StopWS() (bool, error) {\n\tapi.node.lock.Lock()\n\tdefer api.node.lock.Unlock()\n\n\tif api.node.wsHandler == nil {\n\t\treturn false, fmt.Errorf(\"WebSocket RPC not running\")\n\t}\n\tapi.node.stopWS()\n\treturn true, nil\n}\n```", 
      "externalDocs": {
        "description": "line=250", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/node/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_accountRange", 
      "tags": [], 
      "summary": "AccountRange enumerates all accounts in the latest state\n", 
      "description": "```go\n// AccountRange enumerates all accounts in the latest state\nfunc (api *PrivateDebugAPI) AccountRange(ctx context.Context, start *common.Hash, maxResults int) (AccountRangeResult, error) {\n\tvar statedb *state.StateDB\n\tvar err error\n\tblock := api.eth.blockchain.CurrentBlock()\n\n\tif len(block.Transactions()) == 0 {\n\t\tstatedb, err = api.computeStateDB(block, defaultTraceReexec)\n\t\tif err != nil {\n\t\t\treturn AccountRangeResult{}, err\n\t\t}\n\t} else {\n\t\t_, _, statedb, err = api.computeTxEnv(block.Hash(), len(block.Transactions())-1, 0)\n\t\tif err != nil {\n\t\t\treturn AccountRangeResult{}, err\n\t\t}\n\t}\n\n\ttrie, err := statedb.Database().OpenTrie(block.Header().Root)\n\tif err != nil {\n\t\treturn AccountRangeResult{}, err\n\t}\n\n\treturn accountRange(trie, start, maxResults)\n}\n```", 
      "externalDocs": {
        "description": "line=395", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [
        {
          "name": "start", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.*Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of a Keccak 256 hash POINTER", 
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }, 
        {
          "name": "maxResults", 
          "summary": "", 
          "description": "```go\nint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "AccountRangeResult", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/eth.AccountRangeResult\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "object", 
          "properties": {
            "accounts": {
              "type": "object", 
              "patternProperties": {
                ".*": {
                  "description": "Hex representation of a Keccak 256 hash POINTER", 
                  "type": "string", 
                  "title": "keccak", 
                  "pattern": "^0x[a-fA-F\\d]{64}$"
                }
              }
            }, 
            "next": {
              "type": "string", 
              "title": "keccak", 
              "pattern": "^0x[a-fA-F\\d]{64}$"
            }
          }, 
          "additionalProperties": false
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_backtraceAt", 
      "tags": [], 
      "summary": "BacktraceAt sets the log backtrace location. See package log for details on\nthe pattern syntax.\n", 
      "description": "```go\n// BacktraceAt sets the log backtrace location. See package log for details on\n// the pattern syntax.\nfunc (*HandlerT) BacktraceAt(location string) error {\n\treturn glogger.BacktraceAt(location)\n}\n```", 
      "externalDocs": {
        "description": "line=68", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [
        {
          "name": "location", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_blockProfile", 
      "tags": [], 
      "summary": "BlockProfile turns on goroutine profiling for nsec seconds and writes profile data to\nfile. It uses a profile rate of 1 for most accurate information. If a different rate is\ndesired, set the rate and write the profile manually.\n", 
      "description": "```go\n// BlockProfile turns on goroutine profiling for nsec seconds and writes profile data to\n// file. It uses a profile rate of 1 for most accurate information. If a different rate is\n// desired, set the rate and write the profile manually.\nfunc (*HandlerT) BlockProfile(file string, nsec uint) error {\n\truntime.SetBlockProfileRate(1)\n\ttime.Sleep(time.Duration(nsec) * time.Second)\n\tdefer runtime.SetBlockProfileRate(0)\n\treturn writeProfile(\"block\", file)\n}\n```", 
      "externalDocs": {
        "description": "line=147", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [
        {
          "name": "file", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }, 
        {
          "name": "nsec", 
          "summary": "", 
          "description": "```go\nuint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_chaindbCompact", 
      "tags": [], 
      "summary": "ChaindbCompact flattens the entire key-value database into a single level,\nremoving all unused slots and merging all keys.\n", 
      "description": "```go\n// ChaindbCompact flattens the entire key-value database into a single level,\n// removing all unused slots and merging all keys.\nfunc (api *PrivateDebugAPI) ChaindbCompact() error {\n\tfor b := byte(0); b \u003c 255; b++ {\n\t\tlog.Info(\"Compacting chain database\", \"range\", fmt.Sprintf(\"0x%0.2X-0x%0.2X\", b, b+1))\n\t\tif err := api.b.ChainDb().Compact([]byte{b}, []byte{b + 1}); err != nil {\n\t\t\tlog.Error(\"Database compaction failed\", \"err\", err)\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n```", 
      "externalDocs": {
        "description": "line=1774", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_chaindbProperty", 
      "tags": [], 
      "summary": "ChaindbProperty returns leveldb properties of the key-value database.\n", 
      "description": "```go\n// ChaindbProperty returns leveldb properties of the key-value database.\nfunc (api *PrivateDebugAPI) ChaindbProperty(property string) (string, error) {\n\tif property == \"\" {\n\t\tproperty = \"leveldb.stats\"\n\t} else if !strings.HasPrefix(property, \"leveldb.\") {\n\t\tproperty = \"leveldb.\" + property\n\t}\n\treturn api.b.ChainDb().Stat(property)\n}\n```", 
      "externalDocs": {
        "description": "line=1763", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "property", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "string", 
        "summary": "", 
        "description": "```go\nstring\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "string", 
          "type": "string"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_cpuProfile", 
      "tags": [], 
      "summary": "CpuProfile turns on CPU profiling for nsec seconds and writes\nprofile data to file.\n", 
      "description": "```go\n// CpuProfile turns on CPU profiling for nsec seconds and writes\n// profile data to file.\nfunc (h *HandlerT) CpuProfile(file string, nsec uint) error {\n\tif err := h.StartCPUProfile(file); err != nil {\n\t\treturn err\n\t}\n\ttime.Sleep(time.Duration(nsec) * time.Second)\n\th.StopCPUProfile()\n\treturn nil\n}\n```", 
      "externalDocs": {
        "description": "line=88", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [
        {
          "name": "file", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }, 
        {
          "name": "nsec", 
          "summary": "", 
          "description": "```go\nuint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_dumpBlock", 
      "tags": [], 
      "summary": "DumpBlock retrieves the entire state of the database at a given block.\n", 
      "description": "```go\n// DumpBlock retrieves the entire state of the database at a given block.\nfunc (api *PublicDebugAPI) DumpBlock(blockNr rpc.BlockNumber) (state.Dump, error) {\n\tif blockNr == rpc.PendingBlockNumber {\n\n\t\t_, stateDb := api.eth.miner.Pending()\n\t\treturn stateDb.RawDump(false, false, true), nil\n\t}\n\tvar block *types.Block\n\tif blockNr == rpc.LatestBlockNumber {\n\t\tblock = api.eth.blockchain.CurrentBlock()\n\t} else {\n\t\tblock = api.eth.blockchain.GetBlockByNumber(uint64(blockNr))\n\t}\n\tif block == nil {\n\t\treturn state.Dump{}, fmt.Errorf(\"block #%d not found\", blockNr)\n\t}\n\tstateDb, err := api.eth.BlockChain().StateAt(block.Root())\n\tif err != nil {\n\t\treturn state.Dump{}, err\n\t}\n\treturn stateDb.RawDump(false, false, true), nil\n}\n```", 
      "externalDocs": {
        "description": "line=280", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [
        {
          "name": "blockNr", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumber\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumber", 
            "oneOf": [
              {
                "description": "The optional block height description", 
                "type": "string", 
                "title": "blockNumberTag", 
                "enum": ["earliest", "latest", "pending"]
              }, 
              {
                "description": "Hex representation of a Keccak 256 hash", 
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "state.Dump", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/core/state.Dump\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "object", 
          "properties": {
            "accounts": {
              "type": "object", 
              "patternProperties": {
                ".*": {
                  "type": "object", 
                  "properties": {
                    "address": {
                      "type": "string", 
                      "title": "keccak", 
                      "pattern": "^0x[a-fA-F\\d]{64}$"
                    }, 
                    "balance": {
                      "type": "string"
                    }, 
                    "code": {
                      "type": "string"
                    }, 
                    "codeHash": {
                      "type": "string"
                    }, 
                    "key": {
                      "type": "string", 
                      "title": "dataWord", 
                      "pattern": "^0x([a-fA-F\\d]{64})?$"
                    }, 
                    "nonce": {
                      "type": "string", 
                      "title": "integer", 
                      "pattern": "^0x[a-fA-F0-9]+$"
                    }, 
                    "root": {
                      "type": "string"
                    }, 
                    "storage": {
                      "type": "object", 
                      "patternProperties": {
                        ".*": {
                          "type": "string"
                        }
                      }
                    }
                  }, 
                  "additionalProperties": false
                }
              }
            }, 
            "root": {
              "type": "string"
            }
          }, 
          "additionalProperties": false
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_freeOSMemory", 
      "tags": [], 
      "summary": "FreeOSMemory returns unused memory to the OS.\n", 
      "description": "```go\n// FreeOSMemory returns unused memory to the OS.\nfunc (*HandlerT) FreeOSMemory() {\n\tdebug.FreeOSMemory()\n}\n```", 
      "externalDocs": {
        "description": "line=200", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_gcStats", 
      "tags": [], 
      "summary": "GcStats returns GC statistics.\n", 
      "description": "```go\n// GcStats returns GC statistics.\nfunc (*HandlerT) GcStats() *debug.GCStats {\n\ts := new(debug.GCStats)\n\tdebug.ReadGCStats(s)\n\treturn s\n}\n```", 
      "externalDocs": {
        "description": "line=80", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "*debug.GCStats", 
        "summary": "", 
        "description": "```go\nruntime/debug.*GCStats\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "object", 
              "properties": {
                "LastGC": {
                  "type": "string", 
                  "format": "date-time"
                }, 
                "NumGC": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "Pause": {
                  "type": "array", 
                  "items": {
                    "description": "Hex representation of the integer", 
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }
                }, 
                "PauseEnd": {
                  "type": "array", 
                  "items": {
                    "type": "string", 
                    "format": "date-time"
                  }
                }, 
                "PauseQuantiles": {
                  "type": "array", 
                  "items": {
                    "description": "Hex representation of the integer", 
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }
                }, 
                "PauseTotal": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }
              }, 
              "additionalProperties": false
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_getBadBlocks", 
      "tags": [], 
      "summary": "GetBadBlocks returns a list of the last 'bad blocks' that the client has seen on the network\nand returns them as a JSON list of block-hashes\n", 
      "description": "```go\n// GetBadBlocks returns a list of the last 'bad blocks' that the client has seen on the network\n// and returns them as a JSON list of block-hashes\nfunc (api *PrivateDebugAPI) GetBadBlocks(ctx context.Context) ([]*BadBlockArgs, error) {\n\tblocks := api.eth.BlockChain().BadBlocks()\n\tresults := make([]*BadBlockArgs, len(blocks))\n\n\tvar err error\n\tfor i, block := range blocks {\n\t\tresults[i] = \u0026BadBlockArgs{\n\t\t\tHash: block.Hash(),\n\t\t}\n\t\tif rlpBytes, err := rlp.EncodeToBytes(block); err != nil {\n\t\t\tresults[i].RLP = err.Error()\n\t\t} else {\n\t\t\tresults[i].RLP = fmt.Sprintf(\"0x%x\", rlpBytes)\n\t\t}\n\t\tif results[i].Block, err = ethapi.RPCMarshalBlock(block, true, true); err != nil {\n\t\t\tresults[i].Block = map[string]interface{}{\"error\": err.Error()}\n\t\t}\n\t}\n\treturn results, nil\n}\n```", 
      "externalDocs": {
        "description": "line=333", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "[]*BadBlockArgs", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "object", 
                "properties": {
                  "block": {
                    "type": "object", 
                    "patternProperties": {
                      ".*": {
                        "additionalProperties": true
                      }
                    }
                  }, 
                  "hash": {
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }, 
                  "rlp": {
                    "type": "string"
                  }
                }, 
                "additionalProperties": false
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_getBlockRlp", 
      "tags": [], 
      "summary": "GetBlockRlp retrieves the RLP encoded for of a single block.\n", 
      "description": "```go\n// GetBlockRlp retrieves the RLP encoded for of a single block.\nfunc (api *PublicDebugAPI) GetBlockRlp(ctx context.Context, number uint64) (string, error) {\n\tblock, _ := api.b.BlockByNumber(ctx, rpc.BlockNumber(number))\n\tif block == nil {\n\t\treturn \"\", fmt.Errorf(\"block #%d not found\", number)\n\t}\n\tencoded, err := rlp.EncodeToBytes(block)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn fmt.Sprintf(\"%x\", encoded), nil\n}\n```", 
      "externalDocs": {
        "description": "line=1681", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "number", 
          "summary": "", 
          "description": "```go\nuint64\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "string", 
        "summary": "", 
        "description": "```go\nstring\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "string", 
          "type": "string"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_getModifiedAccountsByHash", 
      "tags": [], 
      "summary": "GetModifiedAccountsByHash returns all accounts that have changed between the\ntwo blocks specified. A change is defined as a difference in nonce, balance,\ncode hash, or storage hash.\n\nWith one parameter, returns the list of accounts modified in the specified block.\n", 
      "description": "```go\n// GetModifiedAccountsByHash returns all accounts that have changed between the\n// two blocks specified. A change is defined as a difference in nonce, balance,\n// code hash, or storage hash.\n//\n// With one parameter, returns the list of accounts modified in the specified block.\nfunc (api *PrivateDebugAPI) GetModifiedAccountsByHash(startHash common.Hash, endHash *common.Hash) ([]common.Address, error) {\n\tvar startBlock, endBlock *types.Block\n\tstartBlock = api.eth.blockchain.GetBlockByHash(startHash)\n\tif startBlock == nil {\n\t\treturn nil, fmt.Errorf(\"start block %x not found\", startHash)\n\t}\n\n\tif endHash == nil {\n\t\tendBlock = startBlock\n\t\tstartBlock = api.eth.blockchain.GetBlockByHash(startBlock.ParentHash())\n\t\tif startBlock == nil {\n\t\t\treturn nil, fmt.Errorf(\"block %x has no parent\", endBlock.Number())\n\t\t}\n\t} else {\n\t\tendBlock = api.eth.blockchain.GetBlockByHash(*endHash)\n\t\tif endBlock == nil {\n\t\t\treturn nil, fmt.Errorf(\"end block %x not found\", *endHash)\n\t\t}\n\t}\n\treturn api.getModifiedAccounts(startBlock, endBlock)\n}\n```", 
      "externalDocs": {
        "description": "line=502", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [
        {
          "name": "startHash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }, 
        {
          "name": "endHash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.*Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of a Keccak 256 hash POINTER", 
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "[]common.Address", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "string", 
                "title": "address", 
                "pattern": "^0x[a-fA-F\\d]{40}$"
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_getModifiedAccountsByNumber", 
      "tags": [], 
      "summary": "GetModifiedAccountsByNumber returns all accounts that have changed between the\ntwo blocks specified. A change is defined as a difference in nonce, balance,\ncode hash, or storage hash.\n\nWith one parameter, returns the list of accounts modified in the specified block.\n", 
      "description": "```go\n// GetModifiedAccountsByNumber returns all accounts that have changed between the\n// two blocks specified. A change is defined as a difference in nonce, balance,\n// code hash, or storage hash.\n//\n// With one parameter, returns the list of accounts modified in the specified block.\nfunc (api *PrivateDebugAPI) GetModifiedAccountsByNumber(startNum uint64, endNum *uint64) ([]common.Address, error) {\n\tvar startBlock, endBlock *types.Block\n\n\tstartBlock = api.eth.blockchain.GetBlockByNumber(startNum)\n\tif startBlock == nil {\n\t\treturn nil, fmt.Errorf(\"start block %x not found\", startNum)\n\t}\n\n\tif endNum == nil {\n\t\tendBlock = startBlock\n\t\tstartBlock = api.eth.blockchain.GetBlockByHash(startBlock.ParentHash())\n\t\tif startBlock == nil {\n\t\t\treturn nil, fmt.Errorf(\"block %x has no parent\", endBlock.Number())\n\t\t}\n\t} else {\n\t\tendBlock = api.eth.blockchain.GetBlockByNumber(*endNum)\n\t\tif endBlock == nil {\n\t\t\treturn nil, fmt.Errorf(\"end block %d not found\", *endNum)\n\t\t}\n\t}\n\treturn api.getModifiedAccounts(startBlock, endBlock)\n}\n```", 
      "externalDocs": {
        "description": "line=474", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [
        {
          "name": "startNum", 
          "summary": "", 
          "description": "```go\nuint64\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }, 
        {
          "name": "endNum", 
          "summary": "", 
          "description": "```go\n*uint64\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of the integer", 
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "[]common.Address", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "string", 
                "title": "address", 
                "pattern": "^0x[a-fA-F\\d]{40}$"
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_goTrace", 
      "tags": [], 
      "summary": "GoTrace turns on tracing for nsec seconds and writes\ntrace data to file.\n", 
      "description": "```go\n// GoTrace turns on tracing for nsec seconds and writes\n// trace data to file.\nfunc (h *HandlerT) GoTrace(file string, nsec uint) error {\n\tif err := h.StartGoTrace(file); err != nil {\n\t\treturn err\n\t}\n\ttime.Sleep(time.Duration(nsec) * time.Second)\n\th.StopGoTrace()\n\treturn nil\n}\n```", 
      "externalDocs": {
        "description": "line=135", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [
        {
          "name": "file", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }, 
        {
          "name": "nsec", 
          "summary": "", 
          "description": "```go\nuint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_memStats", 
      "tags": [], 
      "summary": "MemStats returns detailed runtime memory statistics.\n", 
      "description": "```go\n// MemStats returns detailed runtime memory statistics.\nfunc (*HandlerT) MemStats() *runtime.MemStats {\n\ts := new(runtime.MemStats)\n\truntime.ReadMemStats(s)\n\treturn s\n}\n```", 
      "externalDocs": {
        "description": "line=73", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "*runtime.MemStats", 
        "summary": "", 
        "description": "```go\nruntime.*MemStats\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "object", 
              "properties": {
                "Alloc": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "BuckHashSys": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "BySize": {
                  "type": "array", 
                  "maxItems": 61, 
                  "minItems": 61, 
                  "items": {
                    "type": "object", 
                    "properties": {
                      "Frees": {
                        "type": "string", 
                        "title": "integer", 
                        "pattern": "^0x[a-fA-F0-9]+$"
                      }, 
                      "Mallocs": {
                        "type": "string", 
                        "title": "integer", 
                        "pattern": "^0x[a-fA-F0-9]+$"
                      }, 
                      "Size": {
                        "type": "string", 
                        "title": "integer", 
                        "pattern": "^0x[a-fA-F0-9]+$"
                      }
                    }, 
                    "additionalProperties": false
                  }
                }, 
                "DebugGC": {
                  "type": "boolean"
                }, 
                "EnableGC": {
                  "type": "boolean"
                }, 
                "Frees": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "GCCPUFraction": {
                  "type": "number"
                }, 
                "GCSys": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "HeapAlloc": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "HeapIdle": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "HeapInuse": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "HeapObjects": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "HeapReleased": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "HeapSys": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "LastGC": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "Lookups": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "MCacheInuse": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "MCacheSys": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "MSpanInuse": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "MSpanSys": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "Mallocs": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "NextGC": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "NumForcedGC": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "NumGC": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "OtherSys": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "PauseEnd": {
                  "type": "array", 
                  "maxItems": 256, 
                  "minItems": 256, 
                  "items": {
                    "description": "Hex representation of the integer", 
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }
                }, 
                "PauseNs": {
                  "type": "array", 
                  "maxItems": 256, 
                  "minItems": 256, 
                  "items": {
                    "description": "Hex representation of the integer", 
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }
                }, 
                "PauseTotalNs": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "StackInuse": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "StackSys": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "Sys": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "TotalAlloc": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }
              }, 
              "additionalProperties": false
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_mutexProfile", 
      "tags": [], 
      "summary": "MutexProfile turns on mutex profiling for nsec seconds and writes profile data to file.\nIt uses a profile rate of 1 for most accurate information. If a different rate is\ndesired, set the rate and write the profile manually.\n", 
      "description": "```go\n// MutexProfile turns on mutex profiling for nsec seconds and writes profile data to file.\n// It uses a profile rate of 1 for most accurate information. If a different rate is\n// desired, set the rate and write the profile manually.\nfunc (*HandlerT) MutexProfile(file string, nsec uint) error {\n\truntime.SetMutexProfileFraction(1)\n\ttime.Sleep(time.Duration(nsec) * time.Second)\n\tdefer runtime.SetMutexProfileFraction(0)\n\treturn writeProfile(\"mutex\", file)\n}\n```", 
      "externalDocs": {
        "description": "line=168", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [
        {
          "name": "file", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }, 
        {
          "name": "nsec", 
          "summary": "", 
          "description": "```go\nuint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_preimage", 
      "tags": [], 
      "summary": "Preimage is a debug API function that returns the preimage for a sha3 hash, if known.\n", 
      "description": "```go\n// Preimage is a debug API function that returns the preimage for a sha3 hash, if known.\nfunc (api *PrivateDebugAPI) Preimage(ctx context.Context, hash common.Hash) (hexutil.Bytes, error) {\n\tif preimage := rawdb.ReadPreimage(api.eth.ChainDb(), hash); preimage != nil {\n\t\treturn preimage, nil\n\t}\n\treturn nil, errors.New(\"unknown preimage\")\n}\n```", 
      "externalDocs": {
        "description": "line=317", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [
        {
          "name": "hash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }
      ], 
      "result": {
        "name": "hexutil.Bytes", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of a 256 bit unit of data", 
              "type": "string", 
              "title": "dataWord", 
              "pattern": "^0x([a-fA-F\\d]{64})?$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_printBlock", 
      "tags": [], 
      "summary": "PrintBlock retrieves a block and returns its pretty printed form.\n", 
      "description": "```go\n// PrintBlock retrieves a block and returns its pretty printed form.\nfunc (api *PublicDebugAPI) PrintBlock(ctx context.Context, number uint64) (string, error) {\n\tblock, _ := api.b.BlockByNumber(ctx, rpc.BlockNumber(number))\n\tif block == nil {\n\t\treturn \"\", fmt.Errorf(\"block #%d not found\", number)\n\t}\n\treturn spew.Sdump(block), nil\n}\n```", 
      "externalDocs": {
        "description": "line=1733", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "number", 
          "summary": "", 
          "description": "```go\nuint64\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "string", 
        "summary": "", 
        "description": "```go\nstring\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "string", 
          "type": "string"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_seedHash", 
      "tags": [], 
      "summary": "SeedHash retrieves the seed hash of a block.\n", 
      "description": "```go\n// SeedHash retrieves the seed hash of a block.\nfunc (api *PublicDebugAPI) SeedHash(ctx context.Context, number uint64) (string, error) {\n\tblock, _ := api.b.BlockByNumber(ctx, rpc.BlockNumber(number))\n\tif block == nil {\n\t\treturn \"\", fmt.Errorf(\"block #%d not found\", number)\n\t}\n\treturn fmt.Sprintf(\"0x%x\", ethash.SeedHash(number)), nil\n}\n```", 
      "externalDocs": {
        "description": "line=1742", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "number", 
          "summary": "", 
          "description": "```go\nuint64\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "string", 
        "summary": "", 
        "description": "```go\nstring\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "string", 
          "type": "string"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_setBlockProfileRate", 
      "tags": [], 
      "summary": "SetBlockProfileRate sets the rate of goroutine block profile data collection.\nrate 0 disables block profiling.\n", 
      "description": "```go\n// SetBlockProfileRate sets the rate of goroutine block profile data collection.\n// rate 0 disables block profiling.\nfunc (*HandlerT) SetBlockProfileRate(rate int) {\n\truntime.SetBlockProfileRate(rate)\n}\n```", 
      "externalDocs": {
        "description": "line=156", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [
        {
          "name": "rate", 
          "summary": "", 
          "description": "```go\nint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_setGCPercent", 
      "tags": [], 
      "summary": "SetGCPercent sets the garbage collection target percentage. It returns the previous\nsetting. A negative value disables GC.\n", 
      "description": "```go\n// SetGCPercent sets the garbage collection target percentage. It returns the previous\n// setting. A negative value disables GC.\nfunc (*HandlerT) SetGCPercent(v int) int {\n\treturn debug.SetGCPercent(v)\n}\n```", 
      "externalDocs": {
        "description": "line=206", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [
        {
          "name": "v", 
          "summary": "", 
          "description": "```go\nint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "int", 
        "summary": "", 
        "description": "```go\nint\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "Hex representation of the integer", 
          "type": "string", 
          "title": "integer", 
          "pattern": "^0x[a-fA-F0-9]+$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_setHead", 
      "tags": [], 
      "summary": "SetHead rewinds the head of the blockchain to a previous block.\n", 
      "description": "```go\n// SetHead rewinds the head of the blockchain to a previous block.\nfunc (api *PrivateDebugAPI) SetHead(number hexutil.Uint64) {\n\tapi.b.SetHead(uint64(number))\n}\n```", 
      "externalDocs": {
        "description": "line=1786", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "number", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Uint64\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_setMutexProfileFraction", 
      "tags": [], 
      "summary": "SetMutexProfileFraction sets the rate of mutex profiling.\n", 
      "description": "```go\n// SetMutexProfileFraction sets the rate of mutex profiling.\nfunc (*HandlerT) SetMutexProfileFraction(rate int) {\n\truntime.SetMutexProfileFraction(rate)\n}\n```", 
      "externalDocs": {
        "description": "line=177", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [
        {
          "name": "rate", 
          "summary": "", 
          "description": "```go\nint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_stacks", 
      "tags": [], 
      "summary": "Stacks returns a printed representation of the stacks of all goroutines.\n", 
      "description": "```go\n// Stacks returns a printed representation of the stacks of all goroutines.\nfunc (*HandlerT) Stacks() string {\n\tbuf := new(bytes.Buffer)\n\tpprof.Lookup(\"goroutine\").WriteTo(buf, 2)\n\treturn buf.String()\n}\n```", 
      "externalDocs": {
        "description": "line=193", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "string", 
        "summary": "", 
        "description": "```go\nstring\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "string", 
          "type": "string"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_standardTraceBadBlockToFile", 
      "tags": [], 
      "summary": "StandardTraceBadBlockToFile dumps the structured logs created during the\nexecution of EVM against a block pulled from the pool of bad ones to the\nlocal file system and returns a list of files to the caller.\n", 
      "description": "```go\n// StandardTraceBadBlockToFile dumps the structured logs created during the\n// execution of EVM against a block pulled from the pool of bad ones to the\n// local file system and returns a list of files to the caller.\nfunc (api *PrivateDebugAPI) StandardTraceBadBlockToFile(ctx context.Context, hash common.Hash, config *StdTraceConfig) ([]string, error) {\n\tblocks := api.eth.blockchain.BadBlocks()\n\tfor _, block := range blocks {\n\t\tif block.Hash() == hash {\n\t\t\treturn api.standardTraceBlockToFile(ctx, block, config)\n\t\t}\n\t}\n\treturn nil, fmt.Errorf(\"bad block %#x not found\", hash)\n}\n```", 
      "externalDocs": {
        "description": "line=432", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api_tracer.go"
      }, 
      "params": [
        {
          "name": "hash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }, 
        {
          "name": "config", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/eth.*StdTraceConfig\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "type": "object", 
                "properties": {
                  "Debug": {
                    "type": "boolean"
                  }, 
                  "DisableMemory": {
                    "type": "boolean"
                  }, 
                  "DisableStack": {
                    "type": "boolean"
                  }, 
                  "DisableStorage": {
                    "type": "boolean"
                  }, 
                  "Limit": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "Reexec": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "TxHash": {
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }
                }, 
                "additionalProperties": false
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "[]string", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "string"
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_standardTraceBlockToFile", 
      "tags": [], 
      "summary": "StandardTraceBlockToFile dumps the structured logs created during the\nexecution of EVM to the local file system and returns a list of files\nto the caller.\n", 
      "description": "```go\n// StandardTraceBlockToFile dumps the structured logs created during the\n// execution of EVM to the local file system and returns a list of files\n// to the caller.\nfunc (api *PrivateDebugAPI) StandardTraceBlockToFile(ctx context.Context, hash common.Hash, config *StdTraceConfig) ([]string, error) {\n\tblock := api.eth.blockchain.GetBlockByHash(hash)\n\tif block == nil {\n\t\treturn nil, fmt.Errorf(\"block %#x not found\", hash)\n\t}\n\treturn api.standardTraceBlockToFile(ctx, block, config)\n}\n```", 
      "externalDocs": {
        "description": "line=421", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api_tracer.go"
      }, 
      "params": [
        {
          "name": "hash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }, 
        {
          "name": "config", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/eth.*StdTraceConfig\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "type": "object", 
                "properties": {
                  "Debug": {
                    "type": "boolean"
                  }, 
                  "DisableMemory": {
                    "type": "boolean"
                  }, 
                  "DisableStack": {
                    "type": "boolean"
                  }, 
                  "DisableStorage": {
                    "type": "boolean"
                  }, 
                  "Limit": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "Reexec": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "TxHash": {
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }
                }, 
                "additionalProperties": false
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "[]string", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "string"
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_startCPUProfile", 
      "tags": [], 
      "summary": "StartCPUProfile turns on CPU profiling, writing to the given file.\n", 
      "description": "```go\n// StartCPUProfile turns on CPU profiling, writing to the given file.\nfunc (h *HandlerT) StartCPUProfile(file string) error {\n\th.mu.Lock()\n\tdefer h.mu.Unlock()\n\tif h.cpuW != nil {\n\t\treturn errors.New(\"CPU profiling already in progress\")\n\t}\n\tf, err := os.Create(expandHome(file))\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := pprof.StartCPUProfile(f); err != nil {\n\t\tf.Close()\n\t\treturn err\n\t}\n\th.cpuW = f\n\th.cpuFile = file\n\tlog.Info(\"CPU profiling started\", \"dump\", h.cpuFile)\n\treturn nil\n}\n```", 
      "externalDocs": {
        "description": "line=98", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [
        {
          "name": "file", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_startGoTrace", 
      "tags": [], 
      "summary": "StartGoTrace turns on tracing, writing to the given file.\n", 
      "description": "```go\n// StartGoTrace turns on tracing, writing to the given file.\nfunc (h *HandlerT) StartGoTrace(file string) error {\n\th.mu.Lock()\n\tdefer h.mu.Unlock()\n\tif h.traceW != nil {\n\t\treturn errors.New(\"trace already in progress\")\n\t}\n\tf, err := os.Create(expandHome(file))\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := trace.Start(f); err != nil {\n\t\tf.Close()\n\t\treturn err\n\t}\n\th.traceW = f\n\th.traceFile = file\n\tlog.Info(\"Go tracing started\", \"dump\", h.traceFile)\n\treturn nil\n}\n```", 
      "externalDocs": {
        "description": "line=30", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/trace.go"
      }, 
      "params": [
        {
          "name": "file", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_stopCPUProfile", 
      "tags": [], 
      "summary": "StopCPUProfile stops an ongoing CPU profile.\n", 
      "description": "```go\n// StopCPUProfile stops an ongoing CPU profile.\nfunc (h *HandlerT) StopCPUProfile() error {\n\th.mu.Lock()\n\tdefer h.mu.Unlock()\n\tpprof.StopCPUProfile()\n\tif h.cpuW == nil {\n\t\treturn errors.New(\"CPU profiling not in progress\")\n\t}\n\tlog.Info(\"Done writing CPU profile\", \"dump\", h.cpuFile)\n\th.cpuW.Close()\n\th.cpuW = nil\n\th.cpuFile = \"\"\n\treturn nil\n}\n```", 
      "externalDocs": {
        "description": "line=119", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_stopGoTrace", 
      "tags": [], 
      "summary": "StopTrace stops an ongoing trace.\n", 
      "description": "```go\n// StopTrace stops an ongoing trace.\nfunc (h *HandlerT) StopGoTrace() error {\n\th.mu.Lock()\n\tdefer h.mu.Unlock()\n\ttrace.Stop()\n\tif h.traceW == nil {\n\t\treturn errors.New(\"trace not in progress\")\n\t}\n\tlog.Info(\"Done writing Go trace\", \"dump\", h.traceFile)\n\th.traceW.Close()\n\th.traceW = nil\n\th.traceFile = \"\"\n\treturn nil\n}\n```", 
      "externalDocs": {
        "description": "line=51", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/trace.go"
      }, 
      "params": [], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_storageRangeAt", 
      "tags": [], 
      "summary": "StorageRangeAt returns the storage at the given block height and transaction index.\n", 
      "description": "```go\n// StorageRangeAt returns the storage at the given block height and transaction index.\nfunc (api *PrivateDebugAPI) StorageRangeAt(ctx context.Context, blockHash common.Hash, txIndex int, contractAddress common.Address, keyStart hexutil.Bytes, maxResult int) (StorageRangeResult, error) {\n\t_, _, statedb, err := api.computeTxEnv(blockHash, txIndex, 0)\n\tif err != nil {\n\t\treturn StorageRangeResult{}, err\n\t}\n\tst := statedb.StorageTrie(contractAddress)\n\tif st == nil {\n\t\treturn StorageRangeResult{}, fmt.Errorf(\"account %x doesn't exist\", contractAddress)\n\t}\n\treturn storageRangeAt(st, keyStart, maxResult)\n}\n```", 
      "externalDocs": {
        "description": "line=434", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [
        {
          "name": "blockHash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }, 
        {
          "name": "txIndex", 
          "summary": "", 
          "description": "```go\nint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }, 
        {
          "name": "contractAddress", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/common.Address", 
            "type": "string", 
            "title": "address", 
            "pattern": "^0x[a-fA-F\\d]{40}$"
          }
        }, 
        {
          "name": "keyStart", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of a 256 bit unit of data", 
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }, 
        {
          "name": "maxResult", 
          "summary": "", 
          "description": "```go\nint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "StorageRangeResult", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/eth.StorageRangeResult\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "object", 
          "properties": {
            "nextKey": {
              "type": "string", 
              "title": "keccak", 
              "pattern": "^0x[a-fA-F\\d]{64}$"
            }, 
            "storage": {
              "type": "object", 
              "patternProperties": {
                ".*": {
                  "type": "object", 
                  "properties": {
                    "key": {
                      "type": "string", 
                      "title": "keccak", 
                      "pattern": "^0x[a-fA-F\\d]{64}$"
                    }, 
                    "value": {
                      "type": "string", 
                      "title": "keccak", 
                      "pattern": "^0x[a-fA-F\\d]{64}$"
                    }
                  }, 
                  "additionalProperties": false
                }
              }
            }
          }, 
          "additionalProperties": false
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_testSignCliqueBlock", 
      "tags": [], 
      "summary": "TestSignCliqueBlock fetches the given block number, and attempts to sign it as a clique header with the\ngiven address, returning the address of the recovered signature\n\nThis is a temporary method to debug the externalsigner integration,\nTODO: Remove this method when the integration is mature\n", 
      "description": "```go\n// TestSignCliqueBlock fetches the given block number, and attempts to sign it as a clique header with the\n// given address, returning the address of the recovered signature\n//\n// This is a temporary method to debug the externalsigner integration,\n// TODO: Remove this method when the integration is mature\nfunc (api *PublicDebugAPI) TestSignCliqueBlock(ctx context.Context, address common.Address, number uint64) (common.Address, error) {\n\tblock, _ := api.b.BlockByNumber(ctx, rpc.BlockNumber(number))\n\tif block == nil {\n\t\treturn common.Address{}, fmt.Errorf(\"block #%d not found\", number)\n\t}\n\theader := block.Header()\n\theader.Extra = make([]byte, 32+65)\n\tencoded := clique.CliqueRLP(header)\n\n\taccount := accounts.Account{Address: address}\n\twallet, err := api.b.AccountManager().Find(account)\n\tif err != nil {\n\t\treturn common.Address{}, err\n\t}\n\n\tsignature, err := wallet.SignData(account, accounts.MimetypeClique, encoded)\n\tif err != nil {\n\t\treturn common.Address{}, err\n\t}\n\tsealHash := clique.SealHash(header).Bytes()\n\tlog.Info(\"test signing of clique block\",\n\t\t\"Sealhash\", fmt.Sprintf(\"%x\", sealHash),\n\t\t\"signature\", fmt.Sprintf(\"%x\", signature))\n\tpubkey, err := crypto.Ecrecover(sealHash, signature)\n\tif err != nil {\n\t\treturn common.Address{}, err\n\t}\n\tvar signer common.Address\n\tcopy(signer[:], crypto.Keccak256(pubkey[1:])[12:])\n\n\treturn signer, nil\n}\n```", 
      "externalDocs": {
        "description": "line=1698", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "address", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/common.Address", 
            "type": "string", 
            "title": "address", 
            "pattern": "^0x[a-fA-F\\d]{40}$"
          }
        }, 
        {
          "name": "number", 
          "summary": "", 
          "description": "```go\nuint64\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "common.Address", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "github.com/ethereum/go-ethereum/common.Address", 
          "type": "string", 
          "title": "address", 
          "pattern": "^0x[a-fA-F\\d]{40}$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_traceBadBlock", 
      "tags": [], 
      "summary": "TraceBadBlockByHash returns the structured logs created during the execution of\nEVM against a block pulled from the pool of bad ones and returns them as a JSON\nobject.\n", 
      "description": "```go\n// TraceBadBlockByHash returns the structured logs created during the execution of\n// EVM against a block pulled from the pool of bad ones and returns them as a JSON\n// object.\nfunc (api *PrivateDebugAPI) TraceBadBlock(ctx context.Context, hash common.Hash, config *TraceConfig) ([]*txTraceResult, error) {\n\tblocks := api.eth.blockchain.BadBlocks()\n\tfor _, block := range blocks {\n\t\tif block.Hash() == hash {\n\t\t\treturn api.traceBlock(ctx, block, config)\n\t\t}\n\t}\n\treturn nil, fmt.Errorf(\"bad block %#x not found\", hash)\n}\n```", 
      "externalDocs": {
        "description": "line=408", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api_tracer.go"
      }, 
      "params": [
        {
          "name": "hash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }, 
        {
          "name": "config", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/eth.*TraceConfig\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "type": "object", 
                "properties": {
                  "Debug": {
                    "type": "boolean"
                  }, 
                  "DisableMemory": {
                    "type": "boolean"
                  }, 
                  "DisableStack": {
                    "type": "boolean"
                  }, 
                  "DisableStorage": {
                    "type": "boolean"
                  }, 
                  "Limit": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "Reexec": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "Timeout": {
                    "type": "string"
                  }, 
                  "Tracer": {
                    "type": "string"
                  }
                }, 
                "additionalProperties": false
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "[]*txTraceResult", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "object", 
                "properties": {
                  "error": {
                    "type": "string"
                  }, 
                  "result": {
                    "additionalProperties": true
                  }
                }, 
                "additionalProperties": false
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_traceBlock", 
      "tags": [], 
      "summary": "TraceBlock returns the structured logs created during the execution of EVM\nand returns them as a JSON object.\n", 
      "description": "```go\n// TraceBlock returns the structured logs created during the execution of EVM\n// and returns them as a JSON object.\nfunc (api *PrivateDebugAPI) TraceBlock(ctx context.Context, blob []byte, config *TraceConfig) ([]*txTraceResult, error) {\n\tblock := new(types.Block)\n\tif err := rlp.Decode(bytes.NewReader(blob), block); err != nil {\n\t\treturn nil, fmt.Errorf(\"could not decode block: %v\", err)\n\t}\n\treturn api.traceBlock(ctx, block, config)\n}\n```", 
      "externalDocs": {
        "description": "line=387", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api_tracer.go"
      }, 
      "params": [
        {
          "name": "blob", 
          "summary": "", 
          "description": "```go\n\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of a variable length byte array", 
                "type": "string", 
                "title": "bytes", 
                "pattern": "^0x([a-fA-F0-9]?)+$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }, 
        {
          "name": "config", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/eth.*TraceConfig\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "type": "object", 
                "properties": {
                  "Debug": {
                    "type": "boolean"
                  }, 
                  "DisableMemory": {
                    "type": "boolean"
                  }, 
                  "DisableStack": {
                    "type": "boolean"
                  }, 
                  "DisableStorage": {
                    "type": "boolean"
                  }, 
                  "Limit": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "Reexec": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "Timeout": {
                    "type": "string"
                  }, 
                  "Tracer": {
                    "type": "string"
                  }
                }, 
                "additionalProperties": false
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "[]*txTraceResult", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "object", 
                "properties": {
                  "error": {
                    "type": "string"
                  }, 
                  "result": {
                    "additionalProperties": true
                  }
                }, 
                "additionalProperties": false
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_traceBlockByHash", 
      "tags": [], 
      "summary": "TraceBlockByHash returns the structured logs created during the execution of\nEVM and returns them as a JSON object.\n", 
      "description": "```go\n// TraceBlockByHash returns the structured logs created during the execution of\n// EVM and returns them as a JSON object.\nfunc (api *PrivateDebugAPI) TraceBlockByHash(ctx context.Context, hash common.Hash, config *TraceConfig) ([]*txTraceResult, error) {\n\tblock := api.eth.blockchain.GetBlockByHash(hash)\n\tif block == nil {\n\t\treturn nil, fmt.Errorf(\"block %#x not found\", hash)\n\t}\n\treturn api.traceBlock(ctx, block, config)\n}\n```", 
      "externalDocs": {
        "description": "line=377", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api_tracer.go"
      }, 
      "params": [
        {
          "name": "hash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }, 
        {
          "name": "config", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/eth.*TraceConfig\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "type": "object", 
                "properties": {
                  "Debug": {
                    "type": "boolean"
                  }, 
                  "DisableMemory": {
                    "type": "boolean"
                  }, 
                  "DisableStack": {
                    "type": "boolean"
                  }, 
                  "DisableStorage": {
                    "type": "boolean"
                  }, 
                  "Limit": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "Reexec": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "Timeout": {
                    "type": "string"
                  }, 
                  "Tracer": {
                    "type": "string"
                  }
                }, 
                "additionalProperties": false
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "[]*txTraceResult", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "object", 
                "properties": {
                  "error": {
                    "type": "string"
                  }, 
                  "result": {
                    "additionalProperties": true
                  }
                }, 
                "additionalProperties": false
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_traceBlockByNumber", 
      "tags": [], 
      "summary": "TraceBlockByNumber returns the structured logs created during the execution of\nEVM and returns them as a JSON object.\n", 
      "description": "```go\n// TraceBlockByNumber returns the structured logs created during the execution of\n// EVM and returns them as a JSON object.\nfunc (api *PrivateDebugAPI) TraceBlockByNumber(ctx context.Context, number rpc.BlockNumber, config *TraceConfig) ([]*txTraceResult, error) {\n\t// Fetch the block that we want to trace\n\tvar block *types.Block\n\n\tswitch number {\n\tcase rpc.PendingBlockNumber:\n\t\tblock = api.eth.miner.PendingBlock()\n\tcase rpc.LatestBlockNumber:\n\t\tblock = api.eth.blockchain.CurrentBlock()\n\tdefault:\n\t\tblock = api.eth.blockchain.GetBlockByNumber(uint64(number))\n\t}\n\n\tif block == nil {\n\t\treturn nil, fmt.Errorf(\"block #%d not found\", number)\n\t}\n\treturn api.traceBlock(ctx, block, config)\n}\n```", 
      "externalDocs": {
        "description": "line=356", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api_tracer.go"
      }, 
      "params": [
        {
          "name": "number", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumber\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumber", 
            "oneOf": [
              {
                "description": "The optional block height description", 
                "type": "string", 
                "title": "blockNumberTag", 
                "enum": ["earliest", "latest", "pending"]
              }, 
              {
                "description": "Hex representation of a Keccak 256 hash", 
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }
            ]
          }
        }, 
        {
          "name": "config", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/eth.*TraceConfig\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "type": "object", 
                "properties": {
                  "Debug": {
                    "type": "boolean"
                  }, 
                  "DisableMemory": {
                    "type": "boolean"
                  }, 
                  "DisableStack": {
                    "type": "boolean"
                  }, 
                  "DisableStorage": {
                    "type": "boolean"
                  }, 
                  "Limit": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "Reexec": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "Timeout": {
                    "type": "string"
                  }, 
                  "Tracer": {
                    "type": "string"
                  }
                }, 
                "additionalProperties": false
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "[]*txTraceResult", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "object", 
                "properties": {
                  "error": {
                    "type": "string"
                  }, 
                  "result": {
                    "additionalProperties": true
                  }
                }, 
                "additionalProperties": false
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_traceBlockFromFile", 
      "tags": [], 
      "summary": "TraceBlockFromFile returns the structured logs created during the execution of\nEVM and returns them as a JSON object.\n", 
      "description": "```go\n// TraceBlockFromFile returns the structured logs created during the execution of\n// EVM and returns them as a JSON object.\nfunc (api *PrivateDebugAPI) TraceBlockFromFile(ctx context.Context, file string, config *TraceConfig) ([]*txTraceResult, error) {\n\tblob, err := ioutil.ReadFile(file)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"could not read file: %v\", err)\n\t}\n\treturn api.TraceBlock(ctx, blob, config)\n}\n```", 
      "externalDocs": {
        "description": "line=397", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api_tracer.go"
      }, 
      "params": [
        {
          "name": "file", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }, 
        {
          "name": "config", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/eth.*TraceConfig\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "type": "object", 
                "properties": {
                  "Debug": {
                    "type": "boolean"
                  }, 
                  "DisableMemory": {
                    "type": "boolean"
                  }, 
                  "DisableStack": {
                    "type": "boolean"
                  }, 
                  "DisableStorage": {
                    "type": "boolean"
                  }, 
                  "Limit": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "Reexec": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "Timeout": {
                    "type": "string"
                  }, 
                  "Tracer": {
                    "type": "string"
                  }
                }, 
                "additionalProperties": false
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "[]*txTraceResult", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "object", 
                "properties": {
                  "error": {
                    "type": "string"
                  }, 
                  "result": {
                    "additionalProperties": true
                  }
                }, 
                "additionalProperties": false
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_traceChain", 
      "tags": [], 
      "summary": "TraceChain returns the structured logs created during the execution of EVM\nbetween two blocks (excluding start) and returns them as a JSON object.\n", 
      "description": "```go\n// TraceChain returns the structured logs created during the execution of EVM\n// between two blocks (excluding start) and returns them as a JSON object.\nfunc (api *PrivateDebugAPI) TraceChain(ctx context.Context, start, end rpc.BlockNumber, config *TraceConfig) (*rpc.Subscription, error) {\n\t// Fetch the block interval that we want to trace\n\tvar from, to *types.Block\n\n\tswitch start {\n\tcase rpc.PendingBlockNumber:\n\t\tfrom = api.eth.miner.PendingBlock()\n\tcase rpc.LatestBlockNumber:\n\t\tfrom = api.eth.blockchain.CurrentBlock()\n\tdefault:\n\t\tfrom = api.eth.blockchain.GetBlockByNumber(uint64(start))\n\t}\n\tswitch end {\n\tcase rpc.PendingBlockNumber:\n\t\tto = api.eth.miner.PendingBlock()\n\tcase rpc.LatestBlockNumber:\n\t\tto = api.eth.blockchain.CurrentBlock()\n\tdefault:\n\t\tto = api.eth.blockchain.GetBlockByNumber(uint64(end))\n\t}\n\n\tif from == nil {\n\t\treturn nil, fmt.Errorf(\"starting block #%d not found\", start)\n\t}\n\tif to == nil {\n\t\treturn nil, fmt.Errorf(\"end block #%d not found\", end)\n\t}\n\tif from.Number().Cmp(to.Number()) \u003e= 0 {\n\t\treturn nil, fmt.Errorf(\"end block (#%d) needs to come after start block (#%d)\", end, start)\n\t}\n\treturn api.traceChain(ctx, from, to, config)\n}\n```", 
      "externalDocs": {
        "description": "line=105", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api_tracer.go"
      }, 
      "params": [
        {
          "name": "start", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumber\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumber", 
            "oneOf": [
              {
                "description": "The optional block height description", 
                "type": "string", 
                "title": "blockNumberTag", 
                "enum": ["earliest", "latest", "pending"]
              }, 
              {
                "description": "Hex representation of a Keccak 256 hash", 
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }
            ]
          }
        }, 
        {
          "name": "end", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumber\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumber", 
            "oneOf": [
              {
                "description": "The optional block height description", 
                "type": "string", 
                "title": "blockNumberTag", 
                "enum": ["earliest", "latest", "pending"]
              }, 
              {
                "description": "Hex representation of a Keccak 256 hash", 
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }
            ]
          }
        }, 
        {
          "name": "config", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/eth.*TraceConfig\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "type": "object", 
                "properties": {
                  "Debug": {
                    "type": "boolean"
                  }, 
                  "DisableMemory": {
                    "type": "boolean"
                  }, 
                  "DisableStack": {
                    "type": "boolean"
                  }, 
                  "DisableStorage": {
                    "type": "boolean"
                  }, 
                  "Limit": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "Reexec": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "Timeout": {
                    "type": "string"
                  }, 
                  "Tracer": {
                    "type": "string"
                  }
                }, 
                "additionalProperties": false
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "*rpc.Subscription", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.*Subscription\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "github.com/ethereum/go-ethereum/rpc.*Subscription", 
              "type": "object", 
              "title": "subscription-ptr"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_traceTransaction", 
      "tags": [], 
      "summary": "FIXME: Is this really supposed to return an *ethapi.ExecutionResult type, or the empty interface in case not *vm.StructLogger?\nTraceTransaction returns the structured logs created during the execution of EVM\nand returns them as a JSON object.\n", 
      "description": "```go\n// FIXME: Is this really supposed to return an *ethapi.ExecutionResult type, or the empty interface in case not *vm.StructLogger?\n// TraceTransaction returns the structured logs created during the execution of EVM\n// and returns them as a JSON object.\nfunc (api *PrivateDebugAPI) TraceTransaction(ctx context.Context, hash common.Hash, config *TraceConfig) (*ethapi.ExecutionResult, error) {\n\n\ttx, blockHash, _, index := rawdb.ReadTransaction(api.eth.ChainDb(), hash)\n\tif tx == nil {\n\t\treturn nil, fmt.Errorf(\"transaction %#x not found\", hash)\n\t}\n\treexec := defaultTraceReexec\n\tif config != nil \u0026\u0026 config.Reexec != nil {\n\t\treexec = *config.Reexec\n\t}\n\tmsg, vmctx, statedb, err := api.computeTxEnv(blockHash, int(index), reexec)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn api.traceTx(ctx, msg, vmctx, statedb, config)\n}\n```", 
      "externalDocs": {
        "description": "line=706", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api_tracer.go"
      }, 
      "params": [
        {
          "name": "hash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }, 
        {
          "name": "config", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/eth.*TraceConfig\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "type": "object", 
                "properties": {
                  "Debug": {
                    "type": "boolean"
                  }, 
                  "DisableMemory": {
                    "type": "boolean"
                  }, 
                  "DisableStack": {
                    "type": "boolean"
                  }, 
                  "DisableStorage": {
                    "type": "boolean"
                  }, 
                  "Limit": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "Reexec": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "Timeout": {
                    "type": "string"
                  }, 
                  "Tracer": {
                    "type": "string"
                  }
                }, 
                "additionalProperties": false
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "*ethapi.ExecutionResult", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.*ExecutionResult\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "object", 
              "properties": {
                "failed": {
                  "type": "boolean"
                }, 
                "gas": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "returnValue": {
                  "type": "string"
                }, 
                "structLogs": {
                  "type": "array", 
                  "items": {
                    "type": "object", 
                    "properties": {
                      "depth": {
                        "type": "string", 
                        "title": "integer", 
                        "pattern": "^0x[a-fA-F0-9]+$"
                      }, 
                      "error": {
                        "additionalProperties": true
                      }, 
                      "gas": {
                        "type": "string", 
                        "title": "integer", 
                        "pattern": "^0x[a-fA-F0-9]+$"
                      }, 
                      "gasCost": {
                        "type": "string", 
                        "title": "integer", 
                        "pattern": "^0x[a-fA-F0-9]+$"
                      }, 
                      "memory": {
                        "type": "array", 
                        "items": {
                          "type": "string"
                        }
                      }, 
                      "op": {
                        "type": "string"
                      }, 
                      "pc": {
                        "type": "string", 
                        "title": "integer", 
                        "pattern": "^0x[a-fA-F0-9]+$"
                      }, 
                      "stack": {
                        "type": "array", 
                        "items": {
                          "type": "string"
                        }
                      }, 
                      "storage": {
                        "type": "object", 
                        "patternProperties": {
                          ".*": {
                            "type": "string"
                          }
                        }
                      }
                    }, 
                    "additionalProperties": false
                  }
                }
              }, 
              "additionalProperties": false
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_verbosity", 
      "tags": [], 
      "summary": "Verbosity sets the log verbosity ceiling. The verbosity of individual packages\nand source files can be raised using Vmodule.\n", 
      "description": "```go\n// Verbosity sets the log verbosity ceiling. The verbosity of individual packages\n// and source files can be raised using Vmodule.\nfunc (*HandlerT) Verbosity(level int) {\n\tglogger.Verbosity(log.Lvl(level))\n}\n```", 
      "externalDocs": {
        "description": "line=57", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [
        {
          "name": "level", 
          "summary": "", 
          "description": "```go\nint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_vmodule", 
      "tags": [], 
      "summary": "Vmodule sets the log verbosity pattern. See package log for details on the\npattern syntax.\n", 
      "description": "```go\n// Vmodule sets the log verbosity pattern. See package log for details on the\n// pattern syntax.\nfunc (*HandlerT) Vmodule(pattern string) error {\n\treturn glogger.Vmodule(pattern)\n}\n```", 
      "externalDocs": {
        "description": "line=62", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [
        {
          "name": "pattern", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_writeBlockProfile", 
      "tags": [], 
      "summary": "WriteBlockProfile writes a goroutine blocking profile to the given file.\n", 
      "description": "```go\n// WriteBlockProfile writes a goroutine blocking profile to the given file.\nfunc (*HandlerT) WriteBlockProfile(file string) error {\n\treturn writeProfile(\"block\", file)\n}\n```", 
      "externalDocs": {
        "description": "line=161", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [
        {
          "name": "file", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_writeMemProfile", 
      "tags": [], 
      "summary": "WriteMemProfile writes an allocation profile to the given file.\nNote that the profiling rate cannot be set through the API,\nit must be set on the command line.\n", 
      "description": "```go\n// WriteMemProfile writes an allocation profile to the given file.\n// Note that the profiling rate cannot be set through the API,\n// it must be set on the command line.\nfunc (*HandlerT) WriteMemProfile(file string) error {\n\treturn writeProfile(\"heap\", file)\n}\n```", 
      "externalDocs": {
        "description": "line=188", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [
        {
          "name": "file", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "debug_writeMutexProfile", 
      "tags": [], 
      "summary": "WriteMutexProfile writes a goroutine blocking profile to the given file.\n", 
      "description": "```go\n// WriteMutexProfile writes a goroutine blocking profile to the given file.\nfunc (*HandlerT) WriteMutexProfile(file string) error {\n\treturn writeProfile(\"mutex\", file)\n}\n```", 
      "externalDocs": {
        "description": "line=181", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/debug/api.go"
      }, 
      "params": [
        {
          "name": "file", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_accounts", 
      "tags": [], 
      "summary": "Accounts returns the collection of accounts this node manages\n", 
      "description": "```go\n// Accounts returns the collection of accounts this node manages\nfunc (s *PublicAccountAPI) Accounts() []common.Address {\n\treturn s.am.Accounts()\n}\n```", 
      "externalDocs": {
        "description": "line=220", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "[]common.Address", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "string", 
                "title": "address", 
                "pattern": "^0x[a-fA-F\\d]{40}$"
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_blockNumber", 
      "tags": [], 
      "summary": "BlockNumber returns the block number of the chain head.\n", 
      "description": "```go\n// BlockNumber returns the block number of the chain head.\nfunc (s *PublicBlockChainAPI) BlockNumber() hexutil.Uint64 {\n\theader, _ := s.b.HeaderByNumber(context.Background(), rpc.LatestBlockNumber)\n\treturn hexutil.Uint64(header.Number.Uint64())\n}\n```", 
      "externalDocs": {
        "description": "line=552", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "hexutil.Uint64", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Uint64\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "Hex representation of the integer", 
          "type": "string", 
          "title": "integer", 
          "pattern": "^0x[a-fA-F0-9]+$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_call", 
      "tags": [], 
      "summary": "Call executes the given transaction on the state for the given block number.\n\nAdditionally, the caller can specify a batch of contract for fields overriding.\n\nNote, this function doesn't make and changes in the state/blockchain and is\nuseful to execute and retrieve values.\n", 
      "description": "```go\n// Call executes the given transaction on the state for the given block number.\n//\n// Additionally, the caller can specify a batch of contract for fields overriding.\n//\n// Note, this function doesn't make and changes in the state/blockchain and is\n// useful to execute and retrieve values.\nfunc (s *PublicBlockChainAPI) Call(ctx context.Context, args CallArgs, blockNrOrHash rpc.BlockNumberOrHash, overrides *map[common.Address]account) (hexutil.Bytes, error) {\n\tvar accounts map[common.Address]account\n\tif overrides != nil {\n\t\taccounts = *overrides\n\t}\n\tresult, _, _, err := DoCall(ctx, s.b, args, blockNrOrHash, accounts, vm.Config{}, 5*time.Second, s.b.RPCGasCap())\n\treturn (hexutil.Bytes)(result), err\n}\n```", 
      "externalDocs": {
        "description": "line=900", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "args", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.CallArgs\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "type": "object", 
            "properties": {
              "data": {
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              "from": {
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }, 
              "gas": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "gasPrice": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "to": {
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }, 
              "value": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }
            }, 
            "additionalProperties": false
          }
        }, 
        {
          "name": "blockNrOrHash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumberOrHash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumberOrHash", 
            "title": "blockNumberOrHash", 
            "oneOf": [
              {
                "oneOf": [
                  {
                    "description": "The optional block height description", 
                    "type": "string", 
                    "title": "blockNumberTag", 
                    "enum": ["earliest", "latest", "pending"]
                  }, 
                  {
                    "description": "Hex representation of a Keccak 256 hash", 
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }
                ]
              }, 
              {
                "allOf": [
                  {
                    "oneOf": [
                      {
                        "description": "The optional block height description", 
                        "type": "string", 
                        "title": "blockNumberTag", 
                        "enum": ["earliest", "latest", "pending"]
                      }, 
                      {
                        "description": "Hex representation of a Keccak 256 hash", 
                        "type": "string", 
                        "title": "keccak", 
                        "pattern": "^0x[a-fA-F\\d]{64}$"
                      }
                    ]
                  }, 
                  {
                    "type": "object", 
                    "required": ["requireCanonical"], 
                    "properties": {
                      "requireCanonical": {
                        "type": "boolean"
                      }
                    }, 
                    "additionalProperties": false
                  }
                ]
              }
            ]
          }
        }, 
        {
          "name": "overrides", 
          "summary": "", 
          "description": "```go\n*\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "*", 
                "type": "object", 
                "patternProperties": {
                  ".*": {
                    "type": "object", 
                    "properties": {
                      "balance": {
                        "type": "string", 
                        "title": "integer", 
                        "pattern": "^0x[a-fA-F0-9]+$"
                      }, 
                      "code": {
                        "type": "string", 
                        "title": "dataWord", 
                        "pattern": "^0x([a-fA-F\\d]{64})?$"
                      }, 
                      "nonce": {
                        "type": "string", 
                        "title": "integer", 
                        "pattern": "^0x[a-fA-F0-9]+$"
                      }, 
                      "state": {
                        "type": "object", 
                        "patternProperties": {
                          ".*": {
                            "description": "Hex representation of a Keccak 256 hash", 
                            "type": "string", 
                            "title": "keccak", 
                            "pattern": "^0x[a-fA-F\\d]{64}$"
                          }
                        }
                      }, 
                      "stateDiff": {
                        "type": "object", 
                        "patternProperties": {
                          ".*": {
                            "description": "Hex representation of a Keccak 256 hash", 
                            "type": "string", 
                            "title": "keccak", 
                            "pattern": "^0x[a-fA-F\\d]{64}$"
                          }
                        }
                      }
                    }, 
                    "additionalProperties": false
                  }
                }
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "hexutil.Bytes", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of a 256 bit unit of data", 
              "type": "string", 
              "title": "dataWord", 
              "pattern": "^0x([a-fA-F\\d]{64})?$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_chainId", 
      "tags": [], 
      "summary": "ChainId is the EIP-155 replay-protection chain id for the current ethereum chain config.\n", 
      "description": "```go\n// ChainId is the EIP-155 replay-protection chain id for the current ethereum chain config.\nfunc (api *PublicEthereumAPI) ChainId() hexutil.Uint64 {\n\tchainID := new(big.Int)\n\tif config := api.e.blockchain.Config(); config.IsEnabled(config.GetEIP155Transition, api.e.blockchain.CurrentBlock().Number()) {\n\t\tchainID = config.GetChainID()\n\t}\n\treturn (hexutil.Uint64)(chainID.Uint64())\n}\n```", 
      "externalDocs": {
        "description": "line=70", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "hexutil.Uint64", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Uint64\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "Hex representation of the integer", 
          "type": "string", 
          "title": "integer", 
          "pattern": "^0x[a-fA-F0-9]+$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_chainId", 
      "tags": [], 
      "summary": "ChainId returns the chainID value for transaction replay protection.\n", 
      "description": "```go\n// ChainId returns the chainID value for transaction replay protection.\nfunc (s *PublicBlockChainAPI) ChainId() *hexutil.Big {\n\treturn (*hexutil.Big)(s.b.ChainConfig().GetChainID())\n}\n```", 
      "externalDocs": {
        "description": "line=547", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "*hexutil.Big", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.*Big\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of the integer", 
              "type": "string", 
              "title": "integer", 
              "pattern": "^0x[a-fA-F0-9]+$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_coinbase", 
      "tags": [], 
      "summary": "Coinbase is the address that mining rewards will be send to (alias for Etherbase)\n", 
      "description": "```go\n// Coinbase is the address that mining rewards will be send to (alias for Etherbase)\nfunc (api *PublicEthereumAPI) Coinbase() (common.Address, error) {\n\treturn api.Etherbase()\n}\n```", 
      "externalDocs": {
        "description": "line=60", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "common.Address", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "github.com/ethereum/go-ethereum/common.Address", 
          "type": "string", 
          "title": "address", 
          "pattern": "^0x[a-fA-F\\d]{40}$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_estimateGas", 
      "tags": [], 
      "summary": "EstimateGas returns an estimate of the amount of gas needed to execute the\ngiven transaction against the current pending block.\n", 
      "description": "```go\n// EstimateGas returns an estimate of the amount of gas needed to execute the\n// given transaction against the current pending block.\nfunc (s *PublicBlockChainAPI) EstimateGas(ctx context.Context, args CallArgs) (hexutil.Uint64, error) {\n\tblockNrOrHash := rpc.BlockNumberOrHashWithNumber(rpc.PendingBlockNumber)\n\treturn DoEstimateGas(ctx, s.b, args, blockNrOrHash, s.b.RPCGasCap())\n}\n```", 
      "externalDocs": {
        "description": "line=966", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "args", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.CallArgs\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "type": "object", 
            "properties": {
              "data": {
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              "from": {
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }, 
              "gas": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "gasPrice": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "to": {
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }, 
              "value": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }
            }, 
            "additionalProperties": false
          }
        }
      ], 
      "result": {
        "name": "hexutil.Uint64", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Uint64\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "Hex representation of the integer", 
          "type": "string", 
          "title": "integer", 
          "pattern": "^0x[a-fA-F0-9]+$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_etherbase", 
      "tags": [], 
      "summary": "Etherbase is the address that mining rewards will be send to\n", 
      "description": "```go\n// Etherbase is the address that mining rewards will be send to\nfunc (api *PublicEthereumAPI) Etherbase() (common.Address, error) {\n\treturn api.e.Etherbase()\n}\n```", 
      "externalDocs": {
        "description": "line=55", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "common.Address", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "github.com/ethereum/go-ethereum/common.Address", 
          "type": "string", 
          "title": "address", 
          "pattern": "^0x[a-fA-F\\d]{40}$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_fillTransaction", 
      "tags": [], 
      "summary": "FillTransaction fills the defaults (nonce, gas, gasPrice) on a given unsigned transaction,\nand returns it to the caller for further processing (signing + broadcast)\n", 
      "description": "```go\n// FillTransaction fills the defaults (nonce, gas, gasPrice) on a given unsigned transaction,\n// and returns it to the caller for further processing (signing + broadcast)\nfunc (s *PublicTransactionPoolAPI) FillTransaction(ctx context.Context, args SendTxArgs) (*SignTransactionResult, error) {\n\n\tif err := args.setDefaults(ctx, s.b); err != nil {\n\t\treturn nil, err\n\t}\n\n\ttx := args.toTransaction()\n\tdata, err := rlp.EncodeToBytes(tx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn \u0026SignTransactionResult{data, tx}, nil\n}\n```", 
      "externalDocs": {
        "description": "line=1515", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "args", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.SendTxArgs\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "type": "object", 
            "properties": {
              "data": {
                "description": "Field 'input' should be preferred", 
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              "from": {
                "type": "string", 
                "title": "address", 
                "pattern": "^0x[a-fA-F\\d]{40}$"
              }, 
              "gas": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "gasPrice": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "input": {
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              "nonce": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "to": {
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }, 
              "value": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }
            }, 
            "additionalProperties": false
          }
        }
      ], 
      "result": {
        "name": "*SignTransactionResult", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.*SignTransactionResult\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "object", 
              "properties": {
                "raw": {
                  "type": "string", 
                  "title": "dataWord", 
                  "pattern": "^0x([a-fA-F\\d]{64})?$"
                }, 
                "tx": {
                  "type": "object", 
                  "additionalProperties": false
                }
              }, 
              "additionalProperties": false
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_gasPrice", 
      "tags": [], 
      "summary": "GasPrice returns a suggestion for a gas price.\n", 
      "description": "```go\n// GasPrice returns a suggestion for a gas price.\nfunc (s *PublicEthereumAPI) GasPrice(ctx context.Context) (*hexutil.Big, error) {\n\tprice, err := s.b.SuggestPrice(ctx)\n\treturn (*hexutil.Big)(price), err\n}\n```", 
      "externalDocs": {
        "description": "line=67", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "*hexutil.Big", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.*Big\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of the integer", 
              "type": "string", 
              "title": "integer", 
              "pattern": "^0x[a-fA-F0-9]+$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getBalance", 
      "tags": [], 
      "summary": "GetBalance returns the amount of wei for the given address in the state of the\ngiven block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta\nblock numbers are also allowed.\n", 
      "description": "```go\n// GetBalance returns the amount of wei for the given address in the state of the\n// given block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta\n// block numbers are also allowed.\nfunc (s *PublicBlockChainAPI) GetBalance(ctx context.Context, address common.Address, blockNrOrHash rpc.BlockNumberOrHash) (*hexutil.Big, error) {\n\tstate, _, err := s.b.StateAndHeaderByNumberOrHash(ctx, blockNrOrHash)\n\tif state == nil || err != nil {\n\t\treturn nil, err\n\t}\n\treturn (*hexutil.Big)(state.GetBalance(address)), state.Error()\n}\n```", 
      "externalDocs": {
        "description": "line=560", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "address", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/common.Address", 
            "type": "string", 
            "title": "address", 
            "pattern": "^0x[a-fA-F\\d]{40}$"
          }
        }, 
        {
          "name": "blockNrOrHash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumberOrHash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumberOrHash", 
            "title": "blockNumberOrHash", 
            "oneOf": [
              {
                "oneOf": [
                  {
                    "description": "The optional block height description", 
                    "type": "string", 
                    "title": "blockNumberTag", 
                    "enum": ["earliest", "latest", "pending"]
                  }, 
                  {
                    "description": "Hex representation of a Keccak 256 hash", 
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }
                ]
              }, 
              {
                "allOf": [
                  {
                    "oneOf": [
                      {
                        "description": "The optional block height description", 
                        "type": "string", 
                        "title": "blockNumberTag", 
                        "enum": ["earliest", "latest", "pending"]
                      }, 
                      {
                        "description": "Hex representation of a Keccak 256 hash", 
                        "type": "string", 
                        "title": "keccak", 
                        "pattern": "^0x[a-fA-F\\d]{64}$"
                      }
                    ]
                  }, 
                  {
                    "type": "object", 
                    "required": ["requireCanonical"], 
                    "properties": {
                      "requireCanonical": {
                        "type": "boolean"
                      }
                    }, 
                    "additionalProperties": false
                  }
                ]
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "*hexutil.Big", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.*Big\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of the integer", 
              "type": "string", 
              "title": "integer", 
              "pattern": "^0x[a-fA-F0-9]+$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getBlockByHash", 
      "tags": [], 
      "summary": "GetBlockByHash returns the requested block. When fullTx is true all transactions in the block are returned in full\ndetail, otherwise only the transaction hash is returned.\n", 
      "description": "```go\n// GetBlockByHash returns the requested block. When fullTx is true all transactions in the block are returned in full\n// detail, otherwise only the transaction hash is returned.\nfunc (s *PublicBlockChainAPI) GetBlockByHash(ctx context.Context, hash common.Hash, fullTx bool) (map[string]interface{}, error) {\n\tblock, err := s.b.BlockByHash(ctx, hash)\n\tif block != nil {\n\t\treturn s.rpcMarshalBlock(block, true, fullTx)\n\t}\n\treturn nil, err\n}\n```", 
      "externalDocs": {
        "description": "line=683", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "hash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }, 
        {
          "name": "fullTx", 
          "summary": "", 
          "description": "```go\nbool\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "bool", 
            "type": "boolean"
          }
        }
      ], 
      "result": {
        "name": "map[string]interface{}", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "object", 
          "patternProperties": {
            ".*": {
              "additionalProperties": true
            }
          }
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getBlockByNumber", 
      "tags": [], 
      "summary": "GetBlockByNumber returns the requested canonical block.\n* When blockNr is -1 the chain head is returned.\n* When blockNr is -2 the pending chain head is returned.\n* When fullTx is true all transactions in the block are returned, otherwise\n  only the transaction hash is returned.\n", 
      "description": "```go\n// GetBlockByNumber returns the requested canonical block.\n// * When blockNr is -1 the chain head is returned.\n// * When blockNr is -2 the pending chain head is returned.\n// * When fullTx is true all transactions in the block are returned, otherwise\n//   only the transaction hash is returned.\nfunc (s *PublicBlockChainAPI) GetBlockByNumber(ctx context.Context, number rpc.BlockNumber, fullTx bool) (map[string]interface{}, error) {\n\tblock, err := s.b.BlockByNumber(ctx, number)\n\tif block != nil \u0026\u0026 err == nil {\n\t\tresponse, err := s.rpcMarshalBlock(block, true, fullTx)\n\t\tif err == nil \u0026\u0026 number == rpc.PendingBlockNumber {\n\n\t\t\tfor _, field := range []string{\"hash\", \"nonce\", \"miner\"} {\n\t\t\t\tresponse[field] = nil\n\t\t\t}\n\t\t}\n\t\treturn response, err\n\t}\n\treturn nil, err\n}\n```", 
      "externalDocs": {
        "description": "line=666", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "number", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumber\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumber", 
            "oneOf": [
              {
                "description": "The optional block height description", 
                "type": "string", 
                "title": "blockNumberTag", 
                "enum": ["earliest", "latest", "pending"]
              }, 
              {
                "description": "Hex representation of a Keccak 256 hash", 
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }
            ]
          }
        }, 
        {
          "name": "fullTx", 
          "summary": "", 
          "description": "```go\nbool\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "bool", 
            "type": "boolean"
          }
        }
      ], 
      "result": {
        "name": "map[string]interface{}", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "object", 
          "patternProperties": {
            ".*": {
              "additionalProperties": true
            }
          }
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getBlockTransactionCountByHash", 
      "tags": [], 
      "summary": "GetBlockTransactionCountByHash returns the number of transactions in the block with the given hash.\n", 
      "description": "```go\n// GetBlockTransactionCountByHash returns the number of transactions in the block with the given hash.\nfunc (s *PublicTransactionPoolAPI) GetBlockTransactionCountByHash(ctx context.Context, blockHash common.Hash) *hexutil.Uint {\n\tif block, _ := s.b.BlockByHash(ctx, blockHash); block != nil {\n\t\tn := hexutil.Uint(len(block.Transactions()))\n\t\treturn \u0026n\n\t}\n\treturn nil\n}\n```", 
      "externalDocs": {
        "description": "line=1216", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "blockHash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }
      ], 
      "result": {
        "name": "*hexutil.Uint", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.*Uint\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of the integer", 
              "type": "string", 
              "title": "integer", 
              "pattern": "^0x[a-fA-F0-9]+$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getBlockTransactionCountByNumber", 
      "tags": [], 
      "summary": "GetBlockTransactionCountByNumber returns the number of transactions in the block with the given block number.\n", 
      "description": "```go\n// GetBlockTransactionCountByNumber returns the number of transactions in the block with the given block number.\nfunc (s *PublicTransactionPoolAPI) GetBlockTransactionCountByNumber(ctx context.Context, blockNr rpc.BlockNumber) *hexutil.Uint {\n\tif block, _ := s.b.BlockByNumber(ctx, blockNr); block != nil {\n\t\tn := hexutil.Uint(len(block.Transactions()))\n\t\treturn \u0026n\n\t}\n\treturn nil\n}\n```", 
      "externalDocs": {
        "description": "line=1207", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "blockNr", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumber\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumber", 
            "oneOf": [
              {
                "description": "The optional block height description", 
                "type": "string", 
                "title": "blockNumberTag", 
                "enum": ["earliest", "latest", "pending"]
              }, 
              {
                "description": "Hex representation of a Keccak 256 hash", 
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "*hexutil.Uint", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.*Uint\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of the integer", 
              "type": "string", 
              "title": "integer", 
              "pattern": "^0x[a-fA-F0-9]+$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getCode", 
      "tags": [], 
      "summary": "GetCode returns the code stored at the given address in the state for the given block number.\n", 
      "description": "```go\n// GetCode returns the code stored at the given address in the state for the given block number.\nfunc (s *PublicBlockChainAPI) GetCode(ctx context.Context, address common.Address, blockNrOrHash rpc.BlockNumberOrHash) (hexutil.Bytes, error) {\n\tstate, _, err := s.b.StateAndHeaderByNumberOrHash(ctx, blockNrOrHash)\n\tif state == nil || err != nil {\n\t\treturn nil, err\n\t}\n\tcode := state.GetCode(address)\n\treturn code, state.Error()\n}\n```", 
      "externalDocs": {
        "description": "line=742", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "address", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/common.Address", 
            "type": "string", 
            "title": "address", 
            "pattern": "^0x[a-fA-F\\d]{40}$"
          }
        }, 
        {
          "name": "blockNrOrHash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumberOrHash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumberOrHash", 
            "title": "blockNumberOrHash", 
            "oneOf": [
              {
                "oneOf": [
                  {
                    "description": "The optional block height description", 
                    "type": "string", 
                    "title": "blockNumberTag", 
                    "enum": ["earliest", "latest", "pending"]
                  }, 
                  {
                    "description": "Hex representation of a Keccak 256 hash", 
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }
                ]
              }, 
              {
                "allOf": [
                  {
                    "oneOf": [
                      {
                        "description": "The optional block height description", 
                        "type": "string", 
                        "title": "blockNumberTag", 
                        "enum": ["earliest", "latest", "pending"]
                      }, 
                      {
                        "description": "Hex representation of a Keccak 256 hash", 
                        "type": "string", 
                        "title": "keccak", 
                        "pattern": "^0x[a-fA-F\\d]{64}$"
                      }
                    ]
                  }, 
                  {
                    "type": "object", 
                    "required": ["requireCanonical"], 
                    "properties": {
                      "requireCanonical": {
                        "type": "boolean"
                      }
                    }, 
                    "additionalProperties": false
                  }
                ]
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "hexutil.Bytes", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of a 256 bit unit of data", 
              "type": "string", 
              "title": "dataWord", 
              "pattern": "^0x([a-fA-F\\d]{64})?$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getFilterChanges", 
      "tags": [], 
      "summary": "GetFilterChanges returns the logs for the filter with the given id since\nlast time it was called. This can be used for polling.\n\nFor pending transaction and block filters the result is []common.Hash.\n(pending)Log filters return []Log.\n\nhttps://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getfilterchanges\n", 
      "description": "```go\n// GetFilterChanges returns the logs for the filter with the given id since\n// last time it was called. This can be used for polling.\n//\n// For pending transaction and block filters the result is []common.Hash.\n// (pending)Log filters return []Log.\n//\n// https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getfilterchanges\nfunc (api *PublicFilterAPI) GetFilterChanges(id rpc.ID) (interface{}, error) {\n\tapi.filtersMu.Lock()\n\tdefer api.filtersMu.Unlock()\n\n\tif f, found := api.filters[id]; found {\n\t\tif !f.deadline.Stop() {\n\n\t\t\t\u003c-f.deadline.C\n\t\t}\n\t\tf.deadline.Reset(deadline)\n\n\t\tswitch f.typ {\n\t\tcase PendingTransactionsSubscription, BlocksSubscription:\n\t\t\thashes := f.hashes\n\t\t\tf.hashes = nil\n\t\t\treturn returnHashes(hashes), nil\n\t\tcase LogsSubscription, MinedAndPendingLogsSubscription:\n\t\t\tlogs := f.logs\n\t\t\tf.logs = nil\n\t\t\treturn returnLogs(logs), nil\n\t\t}\n\t}\n\n\treturn []interface{}{}, fmt.Errorf(\"filter not found\")\n}\n```", 
      "externalDocs": {
        "description": "line=413", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/filters/api.go"
      }, 
      "params": [
        {
          "name": "id", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.ID\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.ID", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "interface{}", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "additionalProperties": true
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getFilterLogs", 
      "tags": [], 
      "summary": "GetFilterLogs returns the logs for the filter with the given id.\nIf the filter could not be found an empty array of logs is returned.\n\nhttps://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getfilterlogs\n", 
      "description": "```go\n// GetFilterLogs returns the logs for the filter with the given id.\n// If the filter could not be found an empty array of logs is returned.\n//\n// https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getfilterlogs\nfunc (api *PublicFilterAPI) GetFilterLogs(ctx context.Context, id rpc.ID) ([]*types.Log, error) {\n\tapi.filtersMu.Lock()\n\tf, found := api.filters[id]\n\tapi.filtersMu.Unlock()\n\n\tif !found || f.typ != LogsSubscription {\n\t\treturn nil, fmt.Errorf(\"filter not found\")\n\t}\n\n\tvar filter *Filter\n\tif f.crit.BlockHash != nil {\n\n\t\tfilter = NewBlockFilter(api.backend, *f.crit.BlockHash, f.crit.Addresses, f.crit.Topics)\n\t} else {\n\n\t\tbegin := rpc.LatestBlockNumber.Int64()\n\t\tif f.crit.FromBlock != nil {\n\t\t\tbegin = f.crit.FromBlock.Int64()\n\t\t}\n\t\tend := rpc.LatestBlockNumber.Int64()\n\t\tif f.crit.ToBlock != nil {\n\t\t\tend = f.crit.ToBlock.Int64()\n\t\t}\n\n\t\tfilter = NewRangeFilter(api.backend, begin, end, f.crit.Addresses, f.crit.Topics)\n\t}\n\n\tlogs, err := filter.Logs(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn returnLogs(logs), nil\n}\n```", 
      "externalDocs": {
        "description": "line=372", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/filters/api.go"
      }, 
      "params": [
        {
          "name": "id", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.ID\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.ID", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "[]*types.Log", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "object", 
                "properties": {
                  "address": {
                    "type": "string", 
                    "title": "address", 
                    "pattern": "^0x[a-fA-F\\d]{40}$"
                  }, 
                  "blockHash": {
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }, 
                  "blockNumber": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "data": {
                    "type": "string", 
                    "title": "bytes", 
                    "pattern": "^0x([a-fA-F0-9]?)+$"
                  }, 
                  "logIndex": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "removed": {
                    "type": "boolean"
                  }, 
                  "topics": {
                    "type": "array", 
                    "items": {
                      "description": "Hex representation of a Keccak 256 hash", 
                      "type": "string", 
                      "title": "keccak", 
                      "pattern": "^0x[a-fA-F\\d]{64}$"
                    }
                  }, 
                  "transactionHash": {
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }, 
                  "transactionIndex": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }
                }, 
                "additionalProperties": false
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getHashrate", 
      "tags": [], 
      "summary": "GetHashrate returns the current hashrate for local CPU miner and remote miner.\n", 
      "description": "```go\n// GetHashrate returns the current hashrate for local CPU miner and remote miner.\nfunc (api *API) GetHashrate() uint64 {\n\treturn uint64(api.ethash.Hashrate())\n}\n```", 
      "externalDocs": {
        "description": "line=110", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/consensus/ethash/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "uint64", 
        "summary": "", 
        "description": "```go\nuint64\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "Hex representation of the integer", 
          "type": "string", 
          "title": "integer", 
          "pattern": "^0x[a-fA-F0-9]+$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getHeaderByHash", 
      "tags": [], 
      "summary": "GetHeaderByHash returns the requested header by hash.\n", 
      "description": "```go\n// GetHeaderByHash returns the requested header by hash.\nfunc (s *PublicBlockChainAPI) GetHeaderByHash(ctx context.Context, hash common.Hash) map[string]interface{} {\n\theader, _ := s.b.HeaderByHash(ctx, hash)\n\tif header != nil {\n\t\treturn s.rpcMarshalHeader(header)\n\t}\n\treturn nil\n}\n```", 
      "externalDocs": {
        "description": "line=653", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "hash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }
      ], 
      "result": {
        "name": "map[string]interface{}", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "object", 
          "patternProperties": {
            ".*": {
              "additionalProperties": true
            }
          }
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getHeaderByNumber", 
      "tags": [], 
      "summary": "GetHeaderByNumber returns the requested canonical block header.\n* When blockNr is -1 the chain head is returned.\n* When blockNr is -2 the pending chain head is returned.\n", 
      "description": "```go\n// GetHeaderByNumber returns the requested canonical block header.\n// * When blockNr is -1 the chain head is returned.\n// * When blockNr is -2 the pending chain head is returned.\nfunc (s *PublicBlockChainAPI) GetHeaderByNumber(ctx context.Context, number rpc.BlockNumber) (map[string]interface{}, error) {\n\theader, err := s.b.HeaderByNumber(ctx, number)\n\tif header != nil \u0026\u0026 err == nil {\n\t\tresponse := s.rpcMarshalHeader(header)\n\t\tif number == rpc.PendingBlockNumber {\n\n\t\t\tfor _, field := range []string{\"hash\", \"nonce\", \"miner\"} {\n\t\t\t\tresponse[field] = nil\n\t\t\t}\n\t\t}\n\t\treturn response, err\n\t}\n\treturn nil, err\n}\n```", 
      "externalDocs": {
        "description": "line=637", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "number", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumber\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumber", 
            "oneOf": [
              {
                "description": "The optional block height description", 
                "type": "string", 
                "title": "blockNumberTag", 
                "enum": ["earliest", "latest", "pending"]
              }, 
              {
                "description": "Hex representation of a Keccak 256 hash", 
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "map[string]interface{}", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "object", 
          "patternProperties": {
            ".*": {
              "additionalProperties": true
            }
          }
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getLogs", 
      "tags": [], 
      "summary": "GetLogs returns logs matching the given argument that are stored within the state.\n\nhttps://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getlogs\n", 
      "description": "```go\n// GetLogs returns logs matching the given argument that are stored within the state.\n//\n// https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getlogs\nfunc (api *PublicFilterAPI) GetLogs(ctx context.Context, crit FilterCriteria) ([]*types.Log, error) {\n\tvar filter *Filter\n\tif crit.BlockHash != nil {\n\n\t\tfilter = NewBlockFilter(api.backend, *crit.BlockHash, crit.Addresses, crit.Topics)\n\t} else {\n\n\t\tbegin := rpc.LatestBlockNumber.Int64()\n\t\tif crit.FromBlock != nil {\n\t\t\tbegin = crit.FromBlock.Int64()\n\t\t}\n\t\tend := rpc.LatestBlockNumber.Int64()\n\t\tif crit.ToBlock != nil {\n\t\t\tend = crit.ToBlock.Int64()\n\t\t}\n\n\t\tfilter = NewRangeFilter(api.backend, begin, end, crit.Addresses, crit.Topics)\n\t}\n\n\tlogs, err := filter.Logs(ctx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn returnLogs(logs), err\n}\n```", 
      "externalDocs": {
        "description": "line=325", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/filters/api.go"
      }, 
      "params": [
        {
          "name": "crit", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/eth/filters.FilterCriteria\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "type": "object", 
            "properties": {
              "Addresses": {
                "type": "array", 
                "items": {
                  "type": "string", 
                  "title": "address", 
                  "pattern": "^0x[a-fA-F\\d]{40}$"
                }
              }, 
              "BlockHash": {
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }, 
              "FromBlock": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "ToBlock": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "Topics": {
                "type": "array", 
                "items": {
                  "type": "array", 
                  "items": {
                    "description": "Hex representation of a Keccak 256 hash", 
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }
                }
              }
            }, 
            "additionalProperties": false
          }
        }
      ], 
      "result": {
        "name": "[]*types.Log", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "object", 
                "properties": {
                  "address": {
                    "type": "string", 
                    "title": "address", 
                    "pattern": "^0x[a-fA-F\\d]{40}$"
                  }, 
                  "blockHash": {
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }, 
                  "blockNumber": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "data": {
                    "type": "string", 
                    "title": "bytes", 
                    "pattern": "^0x([a-fA-F0-9]?)+$"
                  }, 
                  "logIndex": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "removed": {
                    "type": "boolean"
                  }, 
                  "topics": {
                    "type": "array", 
                    "items": {
                      "description": "Hex representation of a Keccak 256 hash", 
                      "type": "string", 
                      "title": "keccak", 
                      "pattern": "^0x[a-fA-F\\d]{64}$"
                    }
                  }, 
                  "transactionHash": {
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }, 
                  "transactionIndex": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }
                }, 
                "additionalProperties": false
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getProof", 
      "tags": [], 
      "summary": "GetProof returns the Merkle-proof for a given account and optionally some storage keys.\n", 
      "description": "```go\n// GetProof returns the Merkle-proof for a given account and optionally some storage keys.\nfunc (s *PublicBlockChainAPI) GetProof(ctx context.Context, address common.Address, storageKeys []string, blockNrOrHash rpc.BlockNumberOrHash) (*AccountResult, error) {\n\tstate, _, err := s.b.StateAndHeaderByNumberOrHash(ctx, blockNrOrHash)\n\tif state == nil || err != nil {\n\t\treturn nil, err\n\t}\n\n\tstorageTrie := state.StorageTrie(address)\n\tstorageHash := types.EmptyRootHash\n\tcodeHash := state.GetCodeHash(address)\n\tstorageProof := make([]StorageResult, len(storageKeys))\n\n\tif storageTrie != nil {\n\t\tstorageHash = storageTrie.Hash()\n\t} else {\n\n\t\tcodeHash = crypto.Keccak256Hash(nil)\n\t}\n\n\tfor i, key := range storageKeys {\n\t\tif storageTrie != nil {\n\t\t\tproof, storageError := state.GetStorageProof(address, common.HexToHash(key))\n\t\t\tif storageError != nil {\n\t\t\t\treturn nil, storageError\n\t\t\t}\n\t\t\tstorageProof[i] = StorageResult{key, (*hexutil.Big)(state.GetState(address, common.HexToHash(key)).Big()), common.ToHexArray(proof)}\n\t\t} else {\n\t\t\tstorageProof[i] = StorageResult{key, \u0026hexutil.Big{}, []string{}}\n\t\t}\n\t}\n\n\taccountProof, proofErr := state.GetProof(address)\n\tif proofErr != nil {\n\t\treturn nil, proofErr\n\t}\n\n\treturn \u0026AccountResult{\n\t\tAddress:\taddress,\n\t\tAccountProof:\tcommon.ToHexArray(accountProof),\n\t\tBalance:\t(*hexutil.Big)(state.GetBalance(address)),\n\t\tCodeHash:\tcodeHash,\n\t\tNonce:\t\thexutil.Uint64(state.GetNonce(address)),\n\t\tStorageHash:\tstorageHash,\n\t\tStorageProof:\tstorageProof,\n\t}, state.Error()\n}\n```", 
      "externalDocs": {
        "description": "line=585", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "address", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/common.Address", 
            "type": "string", 
            "title": "address", 
            "pattern": "^0x[a-fA-F\\d]{40}$"
          }
        }, 
        {
          "name": "storageKeys", 
          "summary": "", 
          "description": "```go\n\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "type": "array", 
                "items": {
                  "type": "string"
                }
              }, 
              {
                "type": "null"
              }
            ]
          }
        }, 
        {
          "name": "blockNrOrHash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumberOrHash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumberOrHash", 
            "title": "blockNumberOrHash", 
            "oneOf": [
              {
                "oneOf": [
                  {
                    "description": "The optional block height description", 
                    "type": "string", 
                    "title": "blockNumberTag", 
                    "enum": ["earliest", "latest", "pending"]
                  }, 
                  {
                    "description": "Hex representation of a Keccak 256 hash", 
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }
                ]
              }, 
              {
                "allOf": [
                  {
                    "oneOf": [
                      {
                        "description": "The optional block height description", 
                        "type": "string", 
                        "title": "blockNumberTag", 
                        "enum": ["earliest", "latest", "pending"]
                      }, 
                      {
                        "description": "Hex representation of a Keccak 256 hash", 
                        "type": "string", 
                        "title": "keccak", 
                        "pattern": "^0x[a-fA-F\\d]{64}$"
                      }
                    ]
                  }, 
                  {
                    "type": "object", 
                    "required": ["requireCanonical"], 
                    "properties": {
                      "requireCanonical": {
                        "type": "boolean"
                      }
                    }, 
                    "additionalProperties": false
                  }
                ]
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "*AccountResult", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.*AccountResult\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "object", 
              "properties": {
                "accountProof": {
                  "type": "array", 
                  "items": {
                    "type": "string"
                  }
                }, 
                "address": {
                  "type": "string", 
                  "title": "address", 
                  "pattern": "^0x[a-fA-F\\d]{40}$"
                }, 
                "balance": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "codeHash": {
                  "type": "string", 
                  "title": "keccak", 
                  "pattern": "^0x[a-fA-F\\d]{64}$"
                }, 
                "nonce": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "storageHash": {
                  "type": "string", 
                  "title": "keccak", 
                  "pattern": "^0x[a-fA-F\\d]{64}$"
                }, 
                "storageProof": {
                  "type": "array", 
                  "items": {
                    "type": "object", 
                    "properties": {
                      "key": {
                        "type": "string"
                      }, 
                      "proof": {
                        "type": "array", 
                        "items": {
                          "type": "string"
                        }
                      }, 
                      "value": {
                        "type": "string", 
                        "title": "integer", 
                        "pattern": "^0x[a-fA-F0-9]+$"
                      }
                    }, 
                    "additionalProperties": false
                  }
                }
              }, 
              "additionalProperties": false
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getRawTransactionByBlockHashAndIndex", 
      "tags": [], 
      "summary": "GetRawTransactionByBlockHashAndIndex returns the bytes of the transaction for the given block hash and index.\n", 
      "description": "```go\n// GetRawTransactionByBlockHashAndIndex returns the bytes of the transaction for the given block hash and index.\nfunc (s *PublicTransactionPoolAPI) GetRawTransactionByBlockHashAndIndex(ctx context.Context, blockHash common.Hash, index hexutil.Uint) hexutil.Bytes {\n\tif block, _ := s.b.BlockByHash(ctx, blockHash); block != nil {\n\t\treturn newRPCRawTransactionFromBlockIndex(block, uint64(index))\n\t}\n\treturn nil\n}\n```", 
      "externalDocs": {
        "description": "line=1249", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "blockHash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }, 
        {
          "name": "index", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Uint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "hexutil.Bytes", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of a 256 bit unit of data", 
              "type": "string", 
              "title": "dataWord", 
              "pattern": "^0x([a-fA-F\\d]{64})?$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getRawTransactionByBlockNumberAndIndex", 
      "tags": [], 
      "summary": "GetRawTransactionByBlockNumberAndIndex returns the bytes of the transaction for the given block number and index.\n", 
      "description": "```go\n// GetRawTransactionByBlockNumberAndIndex returns the bytes of the transaction for the given block number and index.\nfunc (s *PublicTransactionPoolAPI) GetRawTransactionByBlockNumberAndIndex(ctx context.Context, blockNr rpc.BlockNumber, index hexutil.Uint) hexutil.Bytes {\n\tif block, _ := s.b.BlockByNumber(ctx, blockNr); block != nil {\n\t\treturn newRPCRawTransactionFromBlockIndex(block, uint64(index))\n\t}\n\treturn nil\n}\n```", 
      "externalDocs": {
        "description": "line=1241", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "blockNr", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumber\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumber", 
            "oneOf": [
              {
                "description": "The optional block height description", 
                "type": "string", 
                "title": "blockNumberTag", 
                "enum": ["earliest", "latest", "pending"]
              }, 
              {
                "description": "Hex representation of a Keccak 256 hash", 
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }
            ]
          }
        }, 
        {
          "name": "index", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Uint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "hexutil.Bytes", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of a 256 bit unit of data", 
              "type": "string", 
              "title": "dataWord", 
              "pattern": "^0x([a-fA-F\\d]{64})?$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getRawTransactionByHash", 
      "tags": [], 
      "summary": "GetRawTransactionByHash returns the bytes of the transaction for the given hash.\n", 
      "description": "```go\n// GetRawTransactionByHash returns the bytes of the transaction for the given hash.\nfunc (s *PublicTransactionPoolAPI) GetRawTransactionByHash(ctx context.Context, hash common.Hash) (hexutil.Bytes, error) {\n\n\ttx, _, _, _, err := s.b.GetTransaction(ctx, hash)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif tx == nil {\n\t\tif tx = s.b.GetPoolTransaction(hash); tx == nil {\n\n\t\t\treturn nil, nil\n\t\t}\n\t}\n\n\treturn rlp.EncodeToBytes(tx)\n}\n```", 
      "externalDocs": {
        "description": "line=1295", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "hash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }
      ], 
      "result": {
        "name": "hexutil.Bytes", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of a 256 bit unit of data", 
              "type": "string", 
              "title": "dataWord", 
              "pattern": "^0x([a-fA-F\\d]{64})?$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getStorageAt", 
      "tags": [], 
      "summary": "GetStorageAt returns the storage from the state at the given address, key and\nblock number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta block\nnumbers are also allowed.\n", 
      "description": "```go\n// GetStorageAt returns the storage from the state at the given address, key and\n// block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta block\n// numbers are also allowed.\nfunc (s *PublicBlockChainAPI) GetStorageAt(ctx context.Context, address common.Address, key string, blockNrOrHash rpc.BlockNumberOrHash) (hexutil.Bytes, error) {\n\tstate, _, err := s.b.StateAndHeaderByNumberOrHash(ctx, blockNrOrHash)\n\tif state == nil || err != nil {\n\t\treturn nil, err\n\t}\n\tres := state.GetState(address, common.HexToHash(key))\n\treturn res[:], state.Error()\n}\n```", 
      "externalDocs": {
        "description": "line=754", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "address", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/common.Address", 
            "type": "string", 
            "title": "address", 
            "pattern": "^0x[a-fA-F\\d]{40}$"
          }
        }, 
        {
          "name": "key", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }, 
        {
          "name": "blockNrOrHash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumberOrHash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumberOrHash", 
            "title": "blockNumberOrHash", 
            "oneOf": [
              {
                "oneOf": [
                  {
                    "description": "The optional block height description", 
                    "type": "string", 
                    "title": "blockNumberTag", 
                    "enum": ["earliest", "latest", "pending"]
                  }, 
                  {
                    "description": "Hex representation of a Keccak 256 hash", 
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }
                ]
              }, 
              {
                "allOf": [
                  {
                    "oneOf": [
                      {
                        "description": "The optional block height description", 
                        "type": "string", 
                        "title": "blockNumberTag", 
                        "enum": ["earliest", "latest", "pending"]
                      }, 
                      {
                        "description": "Hex representation of a Keccak 256 hash", 
                        "type": "string", 
                        "title": "keccak", 
                        "pattern": "^0x[a-fA-F\\d]{64}$"
                      }
                    ]
                  }, 
                  {
                    "type": "object", 
                    "required": ["requireCanonical"], 
                    "properties": {
                      "requireCanonical": {
                        "type": "boolean"
                      }
                    }, 
                    "additionalProperties": false
                  }
                ]
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "hexutil.Bytes", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of a 256 bit unit of data", 
              "type": "string", 
              "title": "dataWord", 
              "pattern": "^0x([a-fA-F\\d]{64})?$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getTransactionByBlockHashAndIndex", 
      "tags": [], 
      "summary": "GetTransactionByBlockHashAndIndex returns the transaction for the given block hash and index.\n", 
      "description": "```go\n// GetTransactionByBlockHashAndIndex returns the transaction for the given block hash and index.\nfunc (s *PublicTransactionPoolAPI) GetTransactionByBlockHashAndIndex(ctx context.Context, blockHash common.Hash, index hexutil.Uint) *RPCTransaction {\n\tif block, _ := s.b.BlockByHash(ctx, blockHash); block != nil {\n\t\treturn newRPCTransactionFromBlockIndex(block, uint64(index))\n\t}\n\treturn nil\n}\n```", 
      "externalDocs": {
        "description": "line=1233", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "blockHash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }, 
        {
          "name": "index", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Uint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "*RPCTransaction", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.*RPCTransaction\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "object", 
              "properties": {
                "blockHash": {
                  "type": "string", 
                  "title": "keccak", 
                  "pattern": "^0x[a-fA-F\\d]{64}$"
                }, 
                "blockNumber": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "from": {
                  "type": "string", 
                  "title": "address", 
                  "pattern": "^0x[a-fA-F\\d]{40}$"
                }, 
                "gas": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "gasPrice": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "hash": {
                  "type": "string", 
                  "title": "keccak", 
                  "pattern": "^0x[a-fA-F\\d]{64}$"
                }, 
                "input": {
                  "type": "string", 
                  "title": "dataWord", 
                  "pattern": "^0x([a-fA-F\\d]{64})?$"
                }, 
                "nonce": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "r": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "s": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "to": {
                  "type": "string", 
                  "title": "keccak", 
                  "pattern": "^0x[a-fA-F\\d]{64}$"
                }, 
                "transactionIndex": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "v": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "value": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }
              }, 
              "additionalProperties": false
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getTransactionByBlockNumberAndIndex", 
      "tags": [], 
      "summary": "GetTransactionByBlockNumberAndIndex returns the transaction for the given block number and index.\n", 
      "description": "```go\n// GetTransactionByBlockNumberAndIndex returns the transaction for the given block number and index.\nfunc (s *PublicTransactionPoolAPI) GetTransactionByBlockNumberAndIndex(ctx context.Context, blockNr rpc.BlockNumber, index hexutil.Uint) *RPCTransaction {\n\tif block, _ := s.b.BlockByNumber(ctx, blockNr); block != nil {\n\t\treturn newRPCTransactionFromBlockIndex(block, uint64(index))\n\t}\n\treturn nil\n}\n```", 
      "externalDocs": {
        "description": "line=1225", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "blockNr", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumber\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumber", 
            "oneOf": [
              {
                "description": "The optional block height description", 
                "type": "string", 
                "title": "blockNumberTag", 
                "enum": ["earliest", "latest", "pending"]
              }, 
              {
                "description": "Hex representation of a Keccak 256 hash", 
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }
            ]
          }
        }, 
        {
          "name": "index", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Uint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "*RPCTransaction", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.*RPCTransaction\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "object", 
              "properties": {
                "blockHash": {
                  "type": "string", 
                  "title": "keccak", 
                  "pattern": "^0x[a-fA-F\\d]{64}$"
                }, 
                "blockNumber": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "from": {
                  "type": "string", 
                  "title": "address", 
                  "pattern": "^0x[a-fA-F\\d]{40}$"
                }, 
                "gas": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "gasPrice": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "hash": {
                  "type": "string", 
                  "title": "keccak", 
                  "pattern": "^0x[a-fA-F\\d]{64}$"
                }, 
                "input": {
                  "type": "string", 
                  "title": "dataWord", 
                  "pattern": "^0x([a-fA-F\\d]{64})?$"
                }, 
                "nonce": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "r": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "s": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "to": {
                  "type": "string", 
                  "title": "keccak", 
                  "pattern": "^0x[a-fA-F\\d]{64}$"
                }, 
                "transactionIndex": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "v": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "value": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }
              }, 
              "additionalProperties": false
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getTransactionByHash", 
      "tags": [], 
      "summary": "GetTransactionByHash returns the transaction for the given hash\n", 
      "description": "```go\n// GetTransactionByHash returns the transaction for the given hash\nfunc (s *PublicTransactionPoolAPI) GetTransactionByHash(ctx context.Context, hash common.Hash) (*RPCTransaction, error) {\n\n\ttx, blockHash, blockNumber, index, err := s.b.GetTransaction(ctx, hash)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif tx != nil {\n\t\treturn newRPCTransaction(tx, blockHash, blockNumber, index), nil\n\t}\n\n\tif tx := s.b.GetPoolTransaction(hash); tx != nil {\n\t\treturn newRPCPendingTransaction(tx), nil\n\t}\n\n\treturn nil, nil\n}\n```", 
      "externalDocs": {
        "description": "line=1276", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "hash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }
      ], 
      "result": {
        "name": "*RPCTransaction", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.*RPCTransaction\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "object", 
              "properties": {
                "blockHash": {
                  "type": "string", 
                  "title": "keccak", 
                  "pattern": "^0x[a-fA-F\\d]{64}$"
                }, 
                "blockNumber": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "from": {
                  "type": "string", 
                  "title": "address", 
                  "pattern": "^0x[a-fA-F\\d]{40}$"
                }, 
                "gas": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "gasPrice": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "hash": {
                  "type": "string", 
                  "title": "keccak", 
                  "pattern": "^0x[a-fA-F\\d]{64}$"
                }, 
                "input": {
                  "type": "string", 
                  "title": "dataWord", 
                  "pattern": "^0x([a-fA-F\\d]{64})?$"
                }, 
                "nonce": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "r": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "s": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "to": {
                  "type": "string", 
                  "title": "keccak", 
                  "pattern": "^0x[a-fA-F\\d]{64}$"
                }, 
                "transactionIndex": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "v": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "value": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }
              }, 
              "additionalProperties": false
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getTransactionCount", 
      "tags": [], 
      "summary": "GetTransactionCount returns the number of transactions the given address has sent for the given block number\n", 
      "description": "```go\n// GetTransactionCount returns the number of transactions the given address has sent for the given block number\nfunc (s *PublicTransactionPoolAPI) GetTransactionCount(ctx context.Context, address common.Address, blockNrOrHash rpc.BlockNumberOrHash) (*hexutil.Uint64, error) {\n\n\tif blockNr, ok := blockNrOrHash.Number(); ok \u0026\u0026 blockNr == rpc.PendingBlockNumber {\n\t\tnonce, err := s.b.GetPoolNonce(ctx, address)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn (*hexutil.Uint64)(\u0026nonce), nil\n\t}\n\n\tstate, _, err := s.b.StateAndHeaderByNumberOrHash(ctx, blockNrOrHash)\n\tif state == nil || err != nil {\n\t\treturn nil, err\n\t}\n\tnonce := state.GetNonce(address)\n\treturn (*hexutil.Uint64)(\u0026nonce), state.Error()\n}\n```", 
      "externalDocs": {
        "description": "line=1257", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "address", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/common.Address", 
            "type": "string", 
            "title": "address", 
            "pattern": "^0x[a-fA-F\\d]{40}$"
          }
        }, 
        {
          "name": "blockNrOrHash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumberOrHash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumberOrHash", 
            "title": "blockNumberOrHash", 
            "oneOf": [
              {
                "oneOf": [
                  {
                    "description": "The optional block height description", 
                    "type": "string", 
                    "title": "blockNumberTag", 
                    "enum": ["earliest", "latest", "pending"]
                  }, 
                  {
                    "description": "Hex representation of a Keccak 256 hash", 
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }
                ]
              }, 
              {
                "allOf": [
                  {
                    "oneOf": [
                      {
                        "description": "The optional block height description", 
                        "type": "string", 
                        "title": "blockNumberTag", 
                        "enum": ["earliest", "latest", "pending"]
                      }, 
                      {
                        "description": "Hex representation of a Keccak 256 hash", 
                        "type": "string", 
                        "title": "keccak", 
                        "pattern": "^0x[a-fA-F\\d]{64}$"
                      }
                    ]
                  }, 
                  {
                    "type": "object", 
                    "required": ["requireCanonical"], 
                    "properties": {
                      "requireCanonical": {
                        "type": "boolean"
                      }
                    }, 
                    "additionalProperties": false
                  }
                ]
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "*hexutil.Uint64", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.*Uint64\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of the integer", 
              "type": "string", 
              "title": "integer", 
              "pattern": "^0x[a-fA-F0-9]+$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getTransactionReceipt", 
      "tags": [], 
      "summary": "GetTransactionReceipt returns the transaction receipt for the given transaction hash.\n", 
      "description": "```go\n// GetTransactionReceipt returns the transaction receipt for the given transaction hash.\nfunc (s *PublicTransactionPoolAPI) GetTransactionReceipt(ctx context.Context, hash common.Hash) (map[string]interface{}, error) {\n\ttx, blockHash, blockNumber, index := rawdb.ReadTransaction(s.b.ChainDb(), hash)\n\tif tx == nil {\n\t\treturn nil, nil\n\t}\n\treceipts, err := s.b.GetReceipts(ctx, blockHash)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif len(receipts) \u003c= int(index) {\n\t\treturn nil, nil\n\t}\n\treceipt := receipts[index]\n\n\tvar signer types.Signer = types.FrontierSigner{}\n\tif tx.Protected() {\n\t\tsigner = types.NewEIP155Signer(tx.ChainId())\n\t}\n\tfrom, _ := types.Sender(signer, tx)\n\n\tfields := map[string]interface{}{\n\t\t\"blockHash\":\t\tblockHash,\n\t\t\"blockNumber\":\t\thexutil.Uint64(blockNumber),\n\t\t\"transactionHash\":\thash,\n\t\t\"transactionIndex\":\thexutil.Uint64(index),\n\t\t\"from\":\t\t\tfrom,\n\t\t\"to\":\t\t\ttx.To(),\n\t\t\"gasUsed\":\t\thexutil.Uint64(receipt.GasUsed),\n\t\t\"cumulativeGasUsed\":\thexutil.Uint64(receipt.CumulativeGasUsed),\n\t\t\"contractAddress\":\tnil,\n\t\t\"logs\":\t\t\treceipt.Logs,\n\t\t\"logsBloom\":\t\treceipt.Bloom,\n\t}\n\n\tif len(receipt.PostState) \u003e 0 {\n\t\tfields[\"root\"] = hexutil.Bytes(receipt.PostState)\n\t} else {\n\t\tfields[\"status\"] = hexutil.Uint(receipt.Status)\n\t}\n\tif receipt.Logs == nil {\n\t\tfields[\"logs\"] = [][]*types.Log{}\n\t}\n\n\tif receipt.ContractAddress != (common.Address{}) {\n\t\tfields[\"contractAddress\"] = receipt.ContractAddress\n\t}\n\treturn fields, nil\n}\n```", 
      "externalDocs": {
        "description": "line=1312", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "hash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }
      ], 
      "result": {
        "name": "map[string]interface{}", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "object", 
          "patternProperties": {
            ".*": {
              "additionalProperties": true
            }
          }
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getUncleByBlockHashAndIndex", 
      "tags": [], 
      "summary": "GetUncleByBlockHashAndIndex returns the uncle block for the given block hash and index. When fullTx is true\nall transactions in the block are returned in full detail, otherwise only the transaction hash is returned.\n", 
      "description": "```go\n// GetUncleByBlockHashAndIndex returns the uncle block for the given block hash and index. When fullTx is true\n// all transactions in the block are returned in full detail, otherwise only the transaction hash is returned.\nfunc (s *PublicBlockChainAPI) GetUncleByBlockHashAndIndex(ctx context.Context, blockHash common.Hash, index hexutil.Uint) (map[string]interface{}, error) {\n\tblock, err := s.b.BlockByHash(ctx, blockHash)\n\tif block != nil {\n\t\tuncles := block.Uncles()\n\t\tif index \u003e= hexutil.Uint(len(uncles)) {\n\t\t\tlog.Debug(\"Requested uncle not found\", \"number\", block.Number(), \"hash\", blockHash, \"index\", index)\n\t\t\treturn nil, nil\n\t\t}\n\t\tblock = types.NewBlockWithHeader(uncles[index])\n\t\treturn s.rpcMarshalBlock(block, false, false)\n\t}\n\treturn nil, err\n}\n```", 
      "externalDocs": {
        "description": "line=709", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "blockHash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }, 
        {
          "name": "index", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Uint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "map[string]interface{}", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "object", 
          "patternProperties": {
            ".*": {
              "additionalProperties": true
            }
          }
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getUncleByBlockNumberAndIndex", 
      "tags": [], 
      "summary": "GetUncleByBlockNumberAndIndex returns the uncle block for the given block hash and index. When fullTx is true\nall transactions in the block are returned in full detail, otherwise only the transaction hash is returned.\n", 
      "description": "```go\n// GetUncleByBlockNumberAndIndex returns the uncle block for the given block hash and index. When fullTx is true\n// all transactions in the block are returned in full detail, otherwise only the transaction hash is returned.\nfunc (s *PublicBlockChainAPI) GetUncleByBlockNumberAndIndex(ctx context.Context, blockNr rpc.BlockNumber, index hexutil.Uint) (map[string]interface{}, error) {\n\tblock, err := s.b.BlockByNumber(ctx, blockNr)\n\tif block != nil {\n\t\tuncles := block.Uncles()\n\t\tif index \u003e= hexutil.Uint(len(uncles)) {\n\t\t\tlog.Debug(\"Requested uncle not found\", \"number\", blockNr, \"hash\", block.Hash(), \"index\", index)\n\t\t\treturn nil, nil\n\t\t}\n\t\tblock = types.NewBlockWithHeader(uncles[index])\n\t\treturn s.rpcMarshalBlock(block, false, false)\n\t}\n\treturn nil, err\n}\n```", 
      "externalDocs": {
        "description": "line=693", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "blockNr", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumber\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumber", 
            "oneOf": [
              {
                "description": "The optional block height description", 
                "type": "string", 
                "title": "blockNumberTag", 
                "enum": ["earliest", "latest", "pending"]
              }, 
              {
                "description": "Hex representation of a Keccak 256 hash", 
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }
            ]
          }
        }, 
        {
          "name": "index", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Uint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "map[string]interface{}", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "object", 
          "patternProperties": {
            ".*": {
              "additionalProperties": true
            }
          }
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getUncleCountByBlockHash", 
      "tags": [], 
      "summary": "GetUncleCountByBlockHash returns number of uncles in the block for the given block hash\n", 
      "description": "```go\n// GetUncleCountByBlockHash returns number of uncles in the block for the given block hash\nfunc (s *PublicBlockChainAPI) GetUncleCountByBlockHash(ctx context.Context, blockHash common.Hash) *hexutil.Uint {\n\tif block, _ := s.b.BlockByHash(ctx, blockHash); block != nil {\n\t\tn := hexutil.Uint(len(block.Uncles()))\n\t\treturn \u0026n\n\t}\n\treturn nil\n}\n```", 
      "externalDocs": {
        "description": "line=733", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "blockHash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }
      ], 
      "result": {
        "name": "*hexutil.Uint", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.*Uint\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of the integer", 
              "type": "string", 
              "title": "integer", 
              "pattern": "^0x[a-fA-F0-9]+$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getUncleCountByBlockNumber", 
      "tags": [], 
      "summary": "GetUncleCountByBlockNumber returns number of uncles in the block for the given block number\n", 
      "description": "```go\n// GetUncleCountByBlockNumber returns number of uncles in the block for the given block number\nfunc (s *PublicBlockChainAPI) GetUncleCountByBlockNumber(ctx context.Context, blockNr rpc.BlockNumber) *hexutil.Uint {\n\tif block, _ := s.b.BlockByNumber(ctx, blockNr); block != nil {\n\t\tn := hexutil.Uint(len(block.Uncles()))\n\t\treturn \u0026n\n\t}\n\treturn nil\n}\n```", 
      "externalDocs": {
        "description": "line=724", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "blockNr", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.BlockNumber\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.BlockNumber", 
            "oneOf": [
              {
                "description": "The optional block height description", 
                "type": "string", 
                "title": "blockNumberTag", 
                "enum": ["earliest", "latest", "pending"]
              }, 
              {
                "description": "Hex representation of a Keccak 256 hash", 
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "*hexutil.Uint", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.*Uint\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of the integer", 
              "type": "string", 
              "title": "integer", 
              "pattern": "^0x[a-fA-F0-9]+$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_getWork", 
      "tags": [], 
      "summary": "GetWork returns a work package for external miner.\n\nThe work package consists of 3 strings:\n  result[0] - 32 bytes hex encoded current block header pow-hash\n  result[1] - 32 bytes hex encoded seed hash used for DAG\n  result[2] - 32 bytes hex encoded boundary condition (\"target\"), 2^256/difficulty\n  result[3] - hex encoded block number\n", 
      "description": "```go\n// GetWork returns a work package for external miner.\n//\n// The work package consists of 3 strings:\n//   result[0] - 32 bytes hex encoded current block header pow-hash\n//   result[1] - 32 bytes hex encoded seed hash used for DAG\n//   result[2] - 32 bytes hex encoded boundary condition (\"target\"), 2^256/difficulty\n//   result[3] - hex encoded block number\nfunc (api *API) GetWork() ([4]string, error) {\n\tif api.ethash.remote == nil {\n\t\treturn [4]string{}, errors.New(\"not supported\")\n\t}\n\n\tvar (\n\t\tworkCh\t= make(chan [4]string, 1)\n\t\terrc\t= make(chan error, 1)\n\t)\n\tselect {\n\tcase api.ethash.remote.fetchWorkCh \u003c- \u0026sealWork{errc: errc, res: workCh}:\n\tcase \u003c-api.ethash.remote.exitCh:\n\t\treturn [4]string{}, errEthashStopped\n\t}\n\tselect {\n\tcase work := \u003c-workCh:\n\t\treturn work, nil\n\tcase err := \u003c-errc:\n\t\treturn [4]string{}, err\n\t}\n}\n```", 
      "externalDocs": {
        "description": "line=41", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/consensus/ethash/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "[4]string", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "array", 
          "maxItems": 4, 
          "minItems": 4, 
          "items": {
            "type": "string"
          }
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_hashrate", 
      "tags": [], 
      "summary": "Hashrate returns the POW hashrate\n", 
      "description": "```go\n// Hashrate returns the POW hashrate\nfunc (api *PublicEthereumAPI) Hashrate() hexutil.Uint64 {\n\treturn hexutil.Uint64(api.e.Miner().HashRate())\n}\n```", 
      "externalDocs": {
        "description": "line=65", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "hexutil.Uint64", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Uint64\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "Hex representation of the integer", 
          "type": "string", 
          "title": "integer", 
          "pattern": "^0x[a-fA-F0-9]+$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_logs", 
      "tags": [], 
      "summary": "Logs creates a subscription that fires for all new log that match the given filter criteria.\n", 
      "description": "```go\n// Logs creates a subscription that fires for all new log that match the given filter criteria.\nfunc (api *PublicFilterAPI) Logs(ctx context.Context, crit FilterCriteria) (*rpc.Subscription, error) {\n\tnotifier, supported := rpc.NotifierFromContext(ctx)\n\tif !supported {\n\t\treturn \u0026rpc.Subscription{}, rpc.ErrNotificationsUnsupported\n\t}\n\n\tvar (\n\t\trpcSub\t\t= notifier.CreateSubscription()\n\t\tmatchedLogs\t= make(chan []*types.Log)\n\t)\n\n\tlogsSub, err := api.events.SubscribeLogs(ethereum.FilterQuery(crit), matchedLogs)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tgo func() {\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase logs := \u003c-matchedLogs:\n\t\t\t\tfor _, log := range logs {\n\t\t\t\t\tnotifier.Notify(rpcSub.ID, \u0026log)\n\t\t\t\t}\n\t\t\tcase \u003c-rpcSub.Err():\n\t\t\t\tlogsSub.Unsubscribe()\n\t\t\t\treturn\n\t\t\tcase \u003c-notifier.Closed():\n\t\t\t\tlogsSub.Unsubscribe()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn rpcSub, nil\n}\n```", 
      "externalDocs": {
        "description": "line=236", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/filters/api.go"
      }, 
      "params": [
        {
          "name": "crit", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/eth/filters.FilterCriteria\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "type": "object", 
            "properties": {
              "Addresses": {
                "type": "array", 
                "items": {
                  "type": "string", 
                  "title": "address", 
                  "pattern": "^0x[a-fA-F\\d]{40}$"
                }
              }, 
              "BlockHash": {
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }, 
              "FromBlock": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "ToBlock": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "Topics": {
                "type": "array", 
                "items": {
                  "type": "array", 
                  "items": {
                    "description": "Hex representation of a Keccak 256 hash", 
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }
                }
              }
            }, 
            "additionalProperties": false
          }
        }
      ], 
      "result": {
        "name": "*rpc.Subscription", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.*Subscription\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "github.com/ethereum/go-ethereum/rpc.*Subscription", 
              "type": "object", 
              "title": "subscription-ptr"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_mining", 
      "tags": [], 
      "summary": "Mining returns an indication if this node is currently mining.\n", 
      "description": "```go\n// Mining returns an indication if this node is currently mining.\nfunc (api *PublicMinerAPI) Mining() bool {\n\treturn api.e.IsMining()\n}\n```", 
      "externalDocs": {
        "description": "line=91", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_newBlockFilter", 
      "tags": [], 
      "summary": "NewBlockFilter creates a filter that fetches blocks that are imported into the chain.\nIt is part of the filter package since polling goes with eth_getFilterChanges.\n\nhttps://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newblockfilter\n", 
      "description": "```go\n// NewBlockFilter creates a filter that fetches blocks that are imported into the chain.\n// It is part of the filter package since polling goes with eth_getFilterChanges.\n//\n// https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newblockfilter\nfunc (api *PublicFilterAPI) NewBlockFilter() rpc.ID {\n\tvar (\n\t\theaders\t\t= make(chan *types.Header)\n\t\theaderSub\t= api.events.SubscribeNewHeads(headers)\n\t)\n\n\tapi.filtersMu.Lock()\n\tapi.filters[headerSub.ID] = \u0026filter{typ: BlocksSubscription, deadline: time.NewTimer(deadline), hashes: make([]common.Hash, 0), s: headerSub}\n\tapi.filtersMu.Unlock()\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase h := \u003c-headers:\n\t\t\t\tapi.filtersMu.Lock()\n\t\t\t\tif f, found := api.filters[headerSub.ID]; found {\n\t\t\t\t\tf.hashes = append(f.hashes, h.Hash())\n\t\t\t\t}\n\t\t\t\tapi.filtersMu.Unlock()\n\t\t\tcase \u003c-headerSub.Err():\n\t\t\t\tapi.filtersMu.Lock()\n\t\t\t\tdelete(api.filters, headerSub.ID)\n\t\t\t\tapi.filtersMu.Unlock()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn headerSub.ID\n}\n```", 
      "externalDocs": {
        "description": "line=174", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/filters/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "rpc.ID", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.ID\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "github.com/ethereum/go-ethereum/rpc.ID", 
          "type": "string"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_newFilter", 
      "tags": [], 
      "summary": "NewFilter creates a new filter and returns the filter id. It can be\nused to retrieve logs when the state changes. This method cannot be\nused to fetch logs that are already stored in the state.\n\nDefault criteria for the from and to block are \"latest\".\nUsing \"latest\" as block number will return logs for mined blocks.\nUsing \"pending\" as block number returns logs for not yet mined (pending) blocks.\nIn case logs are removed (chain reorg) previously returned logs are returned\nagain but with the removed property set to true.\n\nIn case \"fromBlock\" \u003e \"toBlock\" an error is returned.\n\nhttps://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newfilter\n", 
      "description": "```go\n// NewFilter creates a new filter and returns the filter id. It can be\n// used to retrieve logs when the state changes. This method cannot be\n// used to fetch logs that are already stored in the state.\n//\n// Default criteria for the from and to block are \"latest\".\n// Using \"latest\" as block number will return logs for mined blocks.\n// Using \"pending\" as block number returns logs for not yet mined (pending) blocks.\n// In case logs are removed (chain reorg) previously returned logs are returned\n// again but with the removed property set to true.\n//\n// In case \"fromBlock\" \u003e \"toBlock\" an error is returned.\n//\n// https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newfilter\nfunc (api *PublicFilterAPI) NewFilter(crit FilterCriteria) (rpc.ID, error) {\n\tlogs := make(chan []*types.Log)\n\tlogsSub, err := api.events.SubscribeLogs(ethereum.FilterQuery(crit), logs)\n\tif err != nil {\n\t\treturn rpc.ID(\"\"), err\n\t}\n\n\tapi.filtersMu.Lock()\n\tapi.filters[logsSub.ID] = \u0026filter{typ: LogsSubscription, crit: crit, deadline: time.NewTimer(deadline), logs: make([]*types.Log, 0), s: logsSub}\n\tapi.filtersMu.Unlock()\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase l := \u003c-logs:\n\t\t\t\tapi.filtersMu.Lock()\n\t\t\t\tif f, found := api.filters[logsSub.ID]; found {\n\t\t\t\t\tf.logs = append(f.logs, l...)\n\t\t\t\t}\n\t\t\t\tapi.filtersMu.Unlock()\n\t\t\tcase \u003c-logsSub.Err():\n\t\t\t\tapi.filtersMu.Lock()\n\t\t\t\tdelete(api.filters, logsSub.ID)\n\t\t\t\tapi.filtersMu.Unlock()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn logsSub.ID, nil\n}\n```", 
      "externalDocs": {
        "description": "line=290", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/filters/api.go"
      }, 
      "params": [
        {
          "name": "crit", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/eth/filters.FilterCriteria\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "type": "object", 
            "properties": {
              "Addresses": {
                "type": "array", 
                "items": {
                  "type": "string", 
                  "title": "address", 
                  "pattern": "^0x[a-fA-F\\d]{40}$"
                }
              }, 
              "BlockHash": {
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }, 
              "FromBlock": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "ToBlock": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "Topics": {
                "type": "array", 
                "items": {
                  "type": "array", 
                  "items": {
                    "description": "Hex representation of a Keccak 256 hash", 
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }
                }
              }
            }, 
            "additionalProperties": false
          }
        }
      ], 
      "result": {
        "name": "rpc.ID", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.ID\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "github.com/ethereum/go-ethereum/rpc.ID", 
          "type": "string"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_newHeads", 
      "tags": [], 
      "summary": "NewHeads send a notification each time a new (header) block is appended to the chain.\n", 
      "description": "```go\n// NewHeads send a notification each time a new (header) block is appended to the chain.\nfunc (api *PublicFilterAPI) NewHeads(ctx context.Context) (*rpc.Subscription, error) {\n\tnotifier, supported := rpc.NotifierFromContext(ctx)\n\tif !supported {\n\t\treturn \u0026rpc.Subscription{}, rpc.ErrNotificationsUnsupported\n\t}\n\n\trpcSub := notifier.CreateSubscription()\n\n\tgo func() {\n\t\theaders := make(chan *types.Header)\n\t\theadersSub := api.events.SubscribeNewHeads(headers)\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase h := \u003c-headers:\n\t\t\t\tnotifier.Notify(rpcSub.ID, h)\n\t\t\tcase \u003c-rpcSub.Err():\n\t\t\t\theadersSub.Unsubscribe()\n\t\t\t\treturn\n\t\t\tcase \u003c-notifier.Closed():\n\t\t\t\theadersSub.Unsubscribe()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn rpcSub, nil\n}\n```", 
      "externalDocs": {
        "description": "line=206", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/filters/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "*rpc.Subscription", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.*Subscription\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "github.com/ethereum/go-ethereum/rpc.*Subscription", 
              "type": "object", 
              "title": "subscription-ptr"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_newPendingTransactionFilter", 
      "tags": [], 
      "summary": "NewPendingTransactionFilter creates a filter that fetches pending transaction hashes\nas transactions enter the pending state.\n\nIt is part of the filter package because this filter can be used through the\n`eth_getFilterChanges` polling method that is also used for log filters.\n\nhttps://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newpendingtransactionfilter\n", 
      "description": "```go\n// NewPendingTransactionFilter creates a filter that fetches pending transaction hashes\n// as transactions enter the pending state.\n//\n// It is part of the filter package because this filter can be used through the\n// `eth_getFilterChanges` polling method that is also used for log filters.\n//\n// https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newpendingtransactionfilter\nfunc (api *PublicFilterAPI) NewPendingTransactionFilter() rpc.ID {\n\tvar (\n\t\tpendingTxs\t= make(chan []common.Hash)\n\t\tpendingTxSub\t= api.events.SubscribePendingTxs(pendingTxs)\n\t)\n\n\tapi.filtersMu.Lock()\n\tapi.filters[pendingTxSub.ID] = \u0026filter{typ: PendingTransactionsSubscription, deadline: time.NewTimer(deadline), hashes: make([]common.Hash, 0), s: pendingTxSub}\n\tapi.filtersMu.Unlock()\n\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase ph := \u003c-pendingTxs:\n\t\t\t\tapi.filtersMu.Lock()\n\t\t\t\tif f, found := api.filters[pendingTxSub.ID]; found {\n\t\t\t\t\tf.hashes = append(f.hashes, ph...)\n\t\t\t\t}\n\t\t\t\tapi.filtersMu.Unlock()\n\t\t\tcase \u003c-pendingTxSub.Err():\n\t\t\t\tapi.filtersMu.Lock()\n\t\t\t\tdelete(api.filters, pendingTxSub.ID)\n\t\t\t\tapi.filtersMu.Unlock()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn pendingTxSub.ID\n}\n```", 
      "externalDocs": {
        "description": "line=104", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/filters/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "rpc.ID", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.ID\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "github.com/ethereum/go-ethereum/rpc.ID", 
          "type": "string"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_newPendingTransactions", 
      "tags": [], 
      "summary": "NewPendingTransactions creates a subscription that is triggered each time a transaction\nenters the transaction pool and was signed from one of the transactions this nodes manages.\n", 
      "description": "```go\n// NewPendingTransactions creates a subscription that is triggered each time a transaction\n// enters the transaction pool and was signed from one of the transactions this nodes manages.\nfunc (api *PublicFilterAPI) NewPendingTransactions(ctx context.Context) (*rpc.Subscription, error) {\n\tnotifier, supported := rpc.NotifierFromContext(ctx)\n\tif !supported {\n\t\treturn \u0026rpc.Subscription{}, rpc.ErrNotificationsUnsupported\n\t}\n\n\trpcSub := notifier.CreateSubscription()\n\n\tgo func() {\n\t\ttxHashes := make(chan []common.Hash, 128)\n\t\tpendingTxSub := api.events.SubscribePendingTxs(txHashes)\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase hashes := \u003c-txHashes:\n\n\t\t\t\tfor _, h := range hashes {\n\t\t\t\t\tnotifier.Notify(rpcSub.ID, h)\n\t\t\t\t}\n\t\t\tcase \u003c-rpcSub.Err():\n\t\t\t\tpendingTxSub.Unsubscribe()\n\t\t\t\treturn\n\t\t\tcase \u003c-notifier.Closed():\n\t\t\t\tpendingTxSub.Unsubscribe()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn rpcSub, nil\n}\n```", 
      "externalDocs": {
        "description": "line=137", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/filters/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "*rpc.Subscription", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.*Subscription\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "github.com/ethereum/go-ethereum/rpc.*Subscription", 
              "type": "object", 
              "title": "subscription-ptr"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_pendingTransactions", 
      "tags": [], 
      "summary": "PendingTransactions returns the transactions that are in the transaction pool\nand have a from address that is one of the accounts this node manages.\n", 
      "description": "```go\n// PendingTransactions returns the transactions that are in the transaction pool\n// and have a from address that is one of the accounts this node manages.\nfunc (s *PublicTransactionPoolAPI) PendingTransactions() ([]*RPCTransaction, error) {\n\tpending, err := s.b.GetPoolTransactions()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\taccounts := make(map[common.Address]struct{})\n\tfor _, wallet := range s.b.AccountManager().Wallets() {\n\t\tfor _, account := range wallet.Accounts() {\n\t\t\taccounts[account.Address] = struct{}{}\n\t\t}\n\t}\n\ttransactions := make([]*RPCTransaction, 0, len(pending))\n\tfor _, tx := range pending {\n\t\tvar signer types.Signer = types.HomesteadSigner{}\n\t\tif tx.Protected() {\n\t\t\tsigner = types.NewEIP155Signer(tx.ChainId())\n\t\t}\n\t\tfrom, _ := types.Sender(signer, tx)\n\t\tif _, exists := accounts[from]; exists {\n\t\t\ttransactions = append(transactions, newRPCPendingTransaction(tx))\n\t\t}\n\t}\n\treturn transactions, nil\n}\n```", 
      "externalDocs": {
        "description": "line=1599", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "[]*RPCTransaction", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "object", 
                "properties": {
                  "blockHash": {
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }, 
                  "blockNumber": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "from": {
                    "type": "string", 
                    "title": "address", 
                    "pattern": "^0x[a-fA-F\\d]{40}$"
                  }, 
                  "gas": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "gasPrice": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "hash": {
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }, 
                  "input": {
                    "type": "string", 
                    "title": "dataWord", 
                    "pattern": "^0x([a-fA-F\\d]{64})?$"
                  }, 
                  "nonce": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "r": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "s": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "to": {
                    "type": "string", 
                    "title": "keccak", 
                    "pattern": "^0x[a-fA-F\\d]{64}$"
                  }, 
                  "transactionIndex": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "v": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }, 
                  "value": {
                    "type": "string", 
                    "title": "integer", 
                    "pattern": "^0x[a-fA-F0-9]+$"
                  }
                }, 
                "additionalProperties": false
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_protocolVersion", 
      "tags": [], 
      "summary": "ProtocolVersion returns the current Ethereum protocol version this node supports\n", 
      "description": "```go\n// ProtocolVersion returns the current Ethereum protocol version this node supports\nfunc (s *PublicEthereumAPI) ProtocolVersion() hexutil.Uint {\n\treturn hexutil.Uint(s.b.ProtocolVersion())\n}\n```", 
      "externalDocs": {
        "description": "line=73", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "hexutil.Uint", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Uint\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "Hex representation of the integer", 
          "type": "string", 
          "title": "integer", 
          "pattern": "^0x[a-fA-F0-9]+$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_resend", 
      "tags": [], 
      "summary": "Resend accepts an existing transaction and a new gas price and limit. It will remove\nthe given transaction from the pool and reinsert it with the new gas price and limit.\n", 
      "description": "```go\n// Resend accepts an existing transaction and a new gas price and limit. It will remove\n// the given transaction from the pool and reinsert it with the new gas price and limit.\nfunc (s *PublicTransactionPoolAPI) Resend(ctx context.Context, sendArgs SendTxArgs, gasPrice *hexutil.Big, gasLimit *hexutil.Uint64) (common.Hash, error) {\n\tif sendArgs.Nonce == nil {\n\t\treturn common.Hash{}, fmt.Errorf(\"missing transaction nonce in transaction spec\")\n\t}\n\tif err := sendArgs.setDefaults(ctx, s.b); err != nil {\n\t\treturn common.Hash{}, err\n\t}\n\tmatchTx := sendArgs.toTransaction()\n\tpending, err := s.b.GetPoolTransactions()\n\tif err != nil {\n\t\treturn common.Hash{}, err\n\t}\n\n\tfor _, p := range pending {\n\t\tvar signer types.Signer = types.HomesteadSigner{}\n\t\tif p.Protected() {\n\t\t\tsigner = types.NewEIP155Signer(p.ChainId())\n\t\t}\n\t\twantSigHash := signer.Hash(matchTx)\n\n\t\tif pFrom, err := types.Sender(signer, p); err == nil \u0026\u0026 pFrom == sendArgs.From \u0026\u0026 signer.Hash(p) == wantSigHash {\n\n\t\t\tif gasPrice != nil \u0026\u0026 (*big.Int)(gasPrice).Sign() != 0 {\n\t\t\t\tsendArgs.GasPrice = gasPrice\n\t\t\t}\n\t\t\tif gasLimit != nil \u0026\u0026 *gasLimit != 0 {\n\t\t\t\tsendArgs.Gas = gasLimit\n\t\t\t}\n\t\t\tsignedTx, err := s.sign(sendArgs.From, sendArgs.toTransaction())\n\t\t\tif err != nil {\n\t\t\t\treturn common.Hash{}, err\n\t\t\t}\n\t\t\tif err = s.b.SendTx(ctx, signedTx); err != nil {\n\t\t\t\treturn common.Hash{}, err\n\t\t\t}\n\t\t\treturn signedTx.Hash(), nil\n\t\t}\n\t}\n\n\treturn common.Hash{}, fmt.Errorf(\"transaction %#x not found\", matchTx.Hash())\n}\n```", 
      "externalDocs": {
        "description": "line=1626", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "sendArgs", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.SendTxArgs\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "type": "object", 
            "properties": {
              "data": {
                "description": "Field 'input' should be preferred", 
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              "from": {
                "type": "string", 
                "title": "address", 
                "pattern": "^0x[a-fA-F\\d]{40}$"
              }, 
              "gas": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "gasPrice": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "input": {
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              "nonce": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "to": {
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }, 
              "value": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }
            }, 
            "additionalProperties": false
          }
        }, 
        {
          "name": "gasPrice", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.*Big\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of the integer", 
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }, 
        {
          "name": "gasLimit", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.*Uint64\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of the integer", 
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "common.Hash", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "Hex representation of a Keccak 256 hash", 
          "type": "string", 
          "title": "keccak", 
          "pattern": "^0x[a-fA-F\\d]{64}$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_sendRawTransaction", 
      "tags": [], 
      "summary": "SendRawTransaction will add the signed transaction to the transaction pool.\nThe sender is responsible for signing the transaction and using the correct nonce.\n", 
      "description": "```go\n// SendRawTransaction will add the signed transaction to the transaction pool.\n// The sender is responsible for signing the transaction and using the correct nonce.\nfunc (s *PublicTransactionPoolAPI) SendRawTransaction(ctx context.Context, encodedTx hexutil.Bytes) (common.Hash, error) {\n\ttx := new(types.Transaction)\n\tif err := rlp.DecodeBytes(encodedTx, tx); err != nil {\n\t\treturn common.Hash{}, err\n\t}\n\treturn SubmitTransaction(ctx, s.b, tx)\n}\n```", 
      "externalDocs": {
        "description": "line=1531", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "encodedTx", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of a 256 bit unit of data", 
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "common.Hash", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "Hex representation of a Keccak 256 hash", 
          "type": "string", 
          "title": "keccak", 
          "pattern": "^0x[a-fA-F\\d]{64}$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_sendTransaction", 
      "tags": [], 
      "summary": "SendTransaction creates a transaction for the given argument, sign it and submit it to the\ntransaction pool.\n", 
      "description": "```go\n// SendTransaction creates a transaction for the given argument, sign it and submit it to the\n// transaction pool.\nfunc (s *PublicTransactionPoolAPI) SendTransaction(ctx context.Context, args SendTxArgs) (common.Hash, error) {\n\n\taccount := accounts.Account{Address: args.From}\n\n\twallet, err := s.b.AccountManager().Find(account)\n\tif err != nil {\n\t\treturn common.Hash{}, err\n\t}\n\n\tif args.Nonce == nil {\n\n\t\ts.nonceLock.LockAddr(args.From)\n\t\tdefer s.nonceLock.UnlockAddr(args.From)\n\t}\n\n\tif err := args.setDefaults(ctx, s.b); err != nil {\n\t\treturn common.Hash{}, err\n\t}\n\n\ttx := args.toTransaction()\n\n\tsigned, err := wallet.SignTx(account, tx, s.b.ChainConfig().GetChainID())\n\tif err != nil {\n\t\treturn common.Hash{}, err\n\t}\n\treturn SubmitTransaction(ctx, s.b, signed)\n}\n```", 
      "externalDocs": {
        "description": "line=1483", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "args", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.SendTxArgs\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "type": "object", 
            "properties": {
              "data": {
                "description": "Field 'input' should be preferred", 
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              "from": {
                "type": "string", 
                "title": "address", 
                "pattern": "^0x[a-fA-F\\d]{40}$"
              }, 
              "gas": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "gasPrice": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "input": {
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              "nonce": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "to": {
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }, 
              "value": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }
            }, 
            "additionalProperties": false
          }
        }
      ], 
      "result": {
        "name": "common.Hash", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "Hex representation of a Keccak 256 hash", 
          "type": "string", 
          "title": "keccak", 
          "pattern": "^0x[a-fA-F\\d]{64}$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_sign", 
      "tags": [], 
      "summary": "Sign calculates an ECDSA signature for:\nkeccack256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message).\n\nNote, the produced signature conforms to the secp256k1 curve R, S and V values,\nwhere the V value will be 27 or 28 for legacy reasons.\n\nThe account associated with addr must be unlocked.\n\nhttps://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n", 
      "description": "```go\n// Sign calculates an ECDSA signature for:\n// keccack256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message).\n//\n// Note, the produced signature conforms to the secp256k1 curve R, S and V values,\n// where the V value will be 27 or 28 for legacy reasons.\n//\n// The account associated with addr must be unlocked.\n//\n// https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\nfunc (s *PublicTransactionPoolAPI) Sign(addr common.Address, data hexutil.Bytes) (hexutil.Bytes, error) {\n\n\taccount := accounts.Account{Address: addr}\n\n\twallet, err := s.b.AccountManager().Find(account)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsignature, err := wallet.SignText(account, data)\n\tif err == nil {\n\t\tsignature[64] += 27\n\t}\n\treturn signature, err\n}\n```", 
      "externalDocs": {
        "description": "line=1548", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "addr", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/common.Address", 
            "type": "string", 
            "title": "address", 
            "pattern": "^0x[a-fA-F\\d]{40}$"
          }
        }, 
        {
          "name": "data", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of a 256 bit unit of data", 
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "hexutil.Bytes", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of a 256 bit unit of data", 
              "type": "string", 
              "title": "dataWord", 
              "pattern": "^0x([a-fA-F\\d]{64})?$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_signTransaction", 
      "tags": [], 
      "summary": "SignTransaction will sign the given transaction with the from account.\nThe node needs to have the private key of the account corresponding with\nthe given from address and it needs to be unlocked.\n", 
      "description": "```go\n// SignTransaction will sign the given transaction with the from account.\n// The node needs to have the private key of the account corresponding with\n// the given from address and it needs to be unlocked.\nfunc (s *PublicTransactionPoolAPI) SignTransaction(ctx context.Context, args SendTxArgs) (*SignTransactionResult, error) {\n\tif args.Gas == nil {\n\t\treturn nil, fmt.Errorf(\"gas not specified\")\n\t}\n\tif args.GasPrice == nil {\n\t\treturn nil, fmt.Errorf(\"gasPrice not specified\")\n\t}\n\tif args.Nonce == nil {\n\t\treturn nil, fmt.Errorf(\"nonce not specified\")\n\t}\n\tif err := args.setDefaults(ctx, s.b); err != nil {\n\t\treturn nil, err\n\t}\n\ttx, err := s.sign(args.From, args.toTransaction())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdata, err := rlp.EncodeToBytes(tx)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn \u0026SignTransactionResult{data, tx}, nil\n}\n```", 
      "externalDocs": {
        "description": "line=1573", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "args", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.SendTxArgs\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "type": "object", 
            "properties": {
              "data": {
                "description": "Field 'input' should be preferred", 
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              "from": {
                "type": "string", 
                "title": "address", 
                "pattern": "^0x[a-fA-F\\d]{40}$"
              }, 
              "gas": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "gasPrice": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "input": {
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              "nonce": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "to": {
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }, 
              "value": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }
            }, 
            "additionalProperties": false
          }
        }
      ], 
      "result": {
        "name": "*SignTransactionResult", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.*SignTransactionResult\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "object", 
              "properties": {
                "raw": {
                  "type": "string", 
                  "title": "dataWord", 
                  "pattern": "^0x([a-fA-F\\d]{64})?$"
                }, 
                "tx": {
                  "type": "object", 
                  "additionalProperties": false
                }
              }, 
              "additionalProperties": false
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_submitHashRate", 
      "tags": [], 
      "summary": "SubmitHashrate can be used for remote miners to submit their hash rate.\nThis enables the node to report the combined hash rate of all miners\nwhich submit work through this node.\n\nIt accepts the miner hash rate and an identifier which must be unique\nbetween nodes.\n", 
      "description": "```go\n// SubmitHashrate can be used for remote miners to submit their hash rate.\n// This enables the node to report the combined hash rate of all miners\n// which submit work through this node.\n//\n// It accepts the miner hash rate and an identifier which must be unique\n// between nodes.\nfunc (api *API) SubmitHashRate(rate hexutil.Uint64, id common.Hash) bool {\n\tif api.ethash.remote == nil {\n\t\treturn false\n\t}\n\n\tvar done = make(chan struct{}, 1)\n\tselect {\n\tcase api.ethash.remote.submitRateCh \u003c- \u0026hashrate{done: done, rate: uint64(rate), id: id}:\n\tcase \u003c-api.ethash.remote.exitCh:\n\t\treturn false\n\t}\n\n\t\u003c-done\n\treturn true\n}\n```", 
      "externalDocs": {
        "description": "line=92", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/consensus/ethash/api.go"
      }, 
      "params": [
        {
          "name": "rate", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Uint64\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }, 
        {
          "name": "id", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_submitWork", 
      "tags": [], 
      "summary": "SubmitWork can be used by external miner to submit their POW solution.\nIt returns an indication if the work was accepted.\nNote either an invalid solution, a stale work a non-existent work will return false.\n", 
      "description": "```go\n// SubmitWork can be used by external miner to submit their POW solution.\n// It returns an indication if the work was accepted.\n// Note either an invalid solution, a stale work a non-existent work will return false.\nfunc (api *API) SubmitWork(nonce types.BlockNonce, hash, digest common.Hash) bool {\n\tif api.ethash.remote == nil {\n\t\treturn false\n\t}\n\n\tvar errc = make(chan error, 1)\n\tselect {\n\tcase api.ethash.remote.submitWorkCh \u003c- \u0026mineResult{\n\t\tnonce:\t\tnonce,\n\t\tmixDigest:\tdigest,\n\t\thash:\t\thash,\n\t\terrc:\t\terrc,\n\t}:\n\tcase \u003c-api.ethash.remote.exitCh:\n\t\treturn false\n\t}\n\terr := \u003c-errc\n\treturn err == nil\n}\n```", 
      "externalDocs": {
        "description": "line=66", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/consensus/ethash/api.go"
      }, 
      "params": [
        {
          "name": "nonce", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/core/types.BlockNonce\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }, 
        {
          "name": "hash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }, 
        {
          "name": "digest", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_subscribeSyncStatus", 
      "tags": [], 
      "summary": "SubscribeSyncStatus creates a subscription that will broadcast new synchronisation updates.\nThe given channel must receive interface values, the result can either\n", 
      "description": "```go\n// SubscribeSyncStatus creates a subscription that will broadcast new synchronisation updates.\n// The given channel must receive interface values, the result can either\nfunc (api *PublicDownloaderAPI) SubscribeSyncStatus(status chan interface{}) *SyncStatusSubscription {\n\tapi.installSyncSubscription \u003c- status\n\treturn \u0026SyncStatusSubscription{api: api, c: status}\n}\n```", 
      "externalDocs": {
        "description": "line=163", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/downloader/api.go"
      }, 
      "params": [
        {
          "name": "status", 
          "summary": "", 
          "description": "```go\n\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "type": "object", 
            "title": "\u003cunknown\u003e"
          }
        }
      ], 
      "result": {
        "name": "*SyncStatusSubscription", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/eth/downloader.*SyncStatusSubscription\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "object", 
              "additionalProperties": false
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_syncing", 
      "tags": [], 
      "summary": "Syncing provides information when this nodes starts synchronising with the Ethereum network and when it's finished.\n", 
      "description": "```go\n// Syncing provides information when this nodes starts synchronising with the Ethereum network and when it's finished.\nfunc (api *PublicDownloaderAPI) Syncing(ctx context.Context) (*rpc.Subscription, error) {\n\tnotifier, supported := rpc.NotifierFromContext(ctx)\n\tif !supported {\n\t\treturn \u0026rpc.Subscription{}, rpc.ErrNotificationsUnsupported\n\t}\n\n\trpcSub := notifier.CreateSubscription()\n\n\tgo func() {\n\t\tstatuses := make(chan interface{})\n\t\tsub := api.SubscribeSyncStatus(statuses)\n\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase status := \u003c-statuses:\n\t\t\t\tnotifier.Notify(rpcSub.ID, status)\n\t\t\tcase \u003c-rpcSub.Err():\n\t\t\t\tsub.Unsubscribe()\n\t\t\t\treturn\n\t\t\tcase \u003c-notifier.Closed():\n\t\t\t\tsub.Unsubscribe()\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn rpcSub, nil\n}\n```", 
      "externalDocs": {
        "description": "line=93", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/downloader/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "*rpc.Subscription", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.*Subscription\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "github.com/ethereum/go-ethereum/rpc.*Subscription", 
              "type": "object", 
              "title": "subscription-ptr"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_syncing", 
      "tags": [], 
      "summary": "Syncing returns false in case the node is currently not syncing with the network. It can be up to date or has not\nyet received the latest block headers from its pears. In case it is synchronizing:\n- startingBlock: block number this node started to synchronise from\n- currentBlock:  block number this node is currently importing\n- highestBlock:  block number of the highest block header this node has received from peers\n- pulledStates:  number of state entries processed until now\n- knownStates:   number of known state entries that still need to be pulled\n", 
      "description": "```go\n// Syncing returns false in case the node is currently not syncing with the network. It can be up to date or has not\n// yet received the latest block headers from its pears. In case it is synchronizing:\n// - startingBlock: block number this node started to synchronise from\n// - currentBlock:  block number this node is currently importing\n// - highestBlock:  block number of the highest block header this node has received from peers\n// - pulledStates:  number of state entries processed until now\n// - knownStates:   number of known state entries that still need to be pulled\nfunc (s *PublicEthereumAPI) Syncing() (EthSyncingResult, error) {\n\tprogress := s.b.Downloader().Progress()\n\n\tif progress.CurrentBlock \u003e= progress.HighestBlock {\n\t\tnot := EthSyncingResultSyncing(false)\n\t\treturn EthSyncingResult{Syncing: not}, nil\n\t}\n\n\treturn EthSyncingResult{\n\t\tSyncing:\ttrue,\n\t\tProgress: \u0026EthSyncingResultProgress{\n\t\t\thexutil.Uint64(progress.StartingBlock),\n\t\t\thexutil.Uint64(progress.CurrentBlock),\n\t\t\thexutil.Uint64(progress.HighestBlock),\n\t\t\thexutil.Uint64(progress.PulledStates),\n\t\t\thexutil.Uint64(progress.KnownStates),\n\t\t},\n\t}, nil\n}\n```", 
      "externalDocs": {
        "description": "line=106", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "EthSyncingResult", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.EthSyncingResult\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "object", 
          "oneOf": [
            {
              "type": "boolean", 
              "title": "Syncing"
            }, 
            {
              "type": "object", 
              "properties": {
                "CurrentgBlock": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "HighestgBlock": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "KnownStates": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "PulledStates": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "StartingBlock": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }
              }, 
              "additionalProperties": false
            }
          ], 
          "properties": {
            "Progress": {
              "type": "object", 
              "properties": {
                "CurrentgBlock": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "HighestgBlock": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "KnownStates": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "PulledStates": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }, 
                "StartingBlock": {
                  "type": "string", 
                  "title": "integer", 
                  "pattern": "^0x[a-fA-F0-9]+$"
                }
              }, 
              "additionalProperties": false
            }, 
            "Syncing": {
              "type": "boolean", 
              "title": "Syncing"
            }
          }, 
          "additionalProperties": false
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "eth_uninstallFilter", 
      "tags": [], 
      "summary": "UninstallFilter removes the filter with the given filter id.\n\nhttps://github.com/ethereum/wiki/wiki/JSON-RPC#eth_uninstallfilter\n", 
      "description": "```go\n// UninstallFilter removes the filter with the given filter id.\n//\n// https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_uninstallfilter\nfunc (api *PublicFilterAPI) UninstallFilter(id rpc.ID) bool {\n\tapi.filtersMu.Lock()\n\tf, found := api.filters[id]\n\tif found {\n\t\tdelete(api.filters, id)\n\t}\n\tapi.filtersMu.Unlock()\n\tif found {\n\t\tf.s.Unsubscribe()\n\t}\n\n\treturn found\n}\n```", 
      "externalDocs": {
        "description": "line=354", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/filters/api.go"
      }, 
      "params": [
        {
          "name": "id", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/rpc.ID\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/rpc.ID", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "ethash_getHashrate", 
      "tags": [], 
      "summary": "GetHashrate returns the current hashrate for local CPU miner and remote miner.\n", 
      "description": "```go\n// GetHashrate returns the current hashrate for local CPU miner and remote miner.\nfunc (api *API) GetHashrate() uint64 {\n\treturn uint64(api.ethash.Hashrate())\n}\n```", 
      "externalDocs": {
        "description": "line=110", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/consensus/ethash/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "uint64", 
        "summary": "", 
        "description": "```go\nuint64\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "Hex representation of the integer", 
          "type": "string", 
          "title": "integer", 
          "pattern": "^0x[a-fA-F0-9]+$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "ethash_getWork", 
      "tags": [], 
      "summary": "GetWork returns a work package for external miner.\n\nThe work package consists of 3 strings:\n  result[0] - 32 bytes hex encoded current block header pow-hash\n  result[1] - 32 bytes hex encoded seed hash used for DAG\n  result[2] - 32 bytes hex encoded boundary condition (\"target\"), 2^256/difficulty\n  result[3] - hex encoded block number\n", 
      "description": "```go\n// GetWork returns a work package for external miner.\n//\n// The work package consists of 3 strings:\n//   result[0] - 32 bytes hex encoded current block header pow-hash\n//   result[1] - 32 bytes hex encoded seed hash used for DAG\n//   result[2] - 32 bytes hex encoded boundary condition (\"target\"), 2^256/difficulty\n//   result[3] - hex encoded block number\nfunc (api *API) GetWork() ([4]string, error) {\n\tif api.ethash.remote == nil {\n\t\treturn [4]string{}, errors.New(\"not supported\")\n\t}\n\n\tvar (\n\t\tworkCh\t= make(chan [4]string, 1)\n\t\terrc\t= make(chan error, 1)\n\t)\n\tselect {\n\tcase api.ethash.remote.fetchWorkCh \u003c- \u0026sealWork{errc: errc, res: workCh}:\n\tcase \u003c-api.ethash.remote.exitCh:\n\t\treturn [4]string{}, errEthashStopped\n\t}\n\tselect {\n\tcase work := \u003c-workCh:\n\t\treturn work, nil\n\tcase err := \u003c-errc:\n\t\treturn [4]string{}, err\n\t}\n}\n```", 
      "externalDocs": {
        "description": "line=41", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/consensus/ethash/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "[4]string", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "array", 
          "maxItems": 4, 
          "minItems": 4, 
          "items": {
            "type": "string"
          }
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "ethash_submitHashRate", 
      "tags": [], 
      "summary": "SubmitHashrate can be used for remote miners to submit their hash rate.\nThis enables the node to report the combined hash rate of all miners\nwhich submit work through this node.\n\nIt accepts the miner hash rate and an identifier which must be unique\nbetween nodes.\n", 
      "description": "```go\n// SubmitHashrate can be used for remote miners to submit their hash rate.\n// This enables the node to report the combined hash rate of all miners\n// which submit work through this node.\n//\n// It accepts the miner hash rate and an identifier which must be unique\n// between nodes.\nfunc (api *API) SubmitHashRate(rate hexutil.Uint64, id common.Hash) bool {\n\tif api.ethash.remote == nil {\n\t\treturn false\n\t}\n\n\tvar done = make(chan struct{}, 1)\n\tselect {\n\tcase api.ethash.remote.submitRateCh \u003c- \u0026hashrate{done: done, rate: uint64(rate), id: id}:\n\tcase \u003c-api.ethash.remote.exitCh:\n\t\treturn false\n\t}\n\n\t\u003c-done\n\treturn true\n}\n```", 
      "externalDocs": {
        "description": "line=92", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/consensus/ethash/api.go"
      }, 
      "params": [
        {
          "name": "rate", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Uint64\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }, 
        {
          "name": "id", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "ethash_submitWork", 
      "tags": [], 
      "summary": "SubmitWork can be used by external miner to submit their POW solution.\nIt returns an indication if the work was accepted.\nNote either an invalid solution, a stale work a non-existent work will return false.\n", 
      "description": "```go\n// SubmitWork can be used by external miner to submit their POW solution.\n// It returns an indication if the work was accepted.\n// Note either an invalid solution, a stale work a non-existent work will return false.\nfunc (api *API) SubmitWork(nonce types.BlockNonce, hash, digest common.Hash) bool {\n\tif api.ethash.remote == nil {\n\t\treturn false\n\t}\n\n\tvar errc = make(chan error, 1)\n\tselect {\n\tcase api.ethash.remote.submitWorkCh \u003c- \u0026mineResult{\n\t\tnonce:\t\tnonce,\n\t\tmixDigest:\tdigest,\n\t\thash:\t\thash,\n\t\terrc:\t\terrc,\n\t}:\n\tcase \u003c-api.ethash.remote.exitCh:\n\t\treturn false\n\t}\n\terr := \u003c-errc\n\treturn err == nil\n}\n```", 
      "externalDocs": {
        "description": "line=66", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/consensus/ethash/api.go"
      }, 
      "params": [
        {
          "name": "nonce", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/core/types.BlockNonce\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }, 
        {
          "name": "hash", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }, 
        {
          "name": "digest", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of a Keccak 256 hash", 
            "type": "string", 
            "title": "keccak", 
            "pattern": "^0x[a-fA-F\\d]{64}$"
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "miner_getHashrate", 
      "tags": [], 
      "summary": "GetHashrate returns the current hashrate of the miner.\n", 
      "description": "```go\n// GetHashrate returns the current hashrate of the miner.\nfunc (api *PrivateMinerAPI) GetHashrate() uint64 {\n\treturn api.e.miner.HashRate()\n}\n```", 
      "externalDocs": {
        "description": "line=153", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "uint64", 
        "summary": "", 
        "description": "```go\nuint64\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "Hex representation of the integer", 
          "type": "string", 
          "title": "integer", 
          "pattern": "^0x[a-fA-F0-9]+$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "miner_setEtherbase", 
      "tags": [], 
      "summary": "SetEtherbase sets the etherbase of the miner\n", 
      "description": "```go\n// SetEtherbase sets the etherbase of the miner\nfunc (api *PrivateMinerAPI) SetEtherbase(etherbase common.Address) bool {\n\tapi.e.SetEtherbase(etherbase)\n\treturn true\n}\n```", 
      "externalDocs": {
        "description": "line=142", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [
        {
          "name": "etherbase", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/common.Address", 
            "type": "string", 
            "title": "address", 
            "pattern": "^0x[a-fA-F\\d]{40}$"
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "miner_setExtra", 
      "tags": [], 
      "summary": "SetExtra sets the extra data string that is included when this miner mines a block.\n", 
      "description": "```go\n// SetExtra sets the extra data string that is included when this miner mines a block.\nfunc (api *PrivateMinerAPI) SetExtra(extra string) (bool, error) {\n\tif err := api.e.Miner().SetExtra([]byte(extra)); err != nil {\n\t\treturn false, err\n\t}\n\treturn true, nil\n}\n```", 
      "externalDocs": {
        "description": "line=124", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [
        {
          "name": "extra", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "miner_setGasPrice", 
      "tags": [], 
      "summary": "SetGasPrice sets the minimum accepted gas price for the miner.\n", 
      "description": "```go\n// SetGasPrice sets the minimum accepted gas price for the miner.\nfunc (api *PrivateMinerAPI) SetGasPrice(gasPrice hexutil.Big) bool {\n\tapi.e.lock.Lock()\n\tapi.e.gasPrice = (*big.Int)(\u0026gasPrice)\n\tapi.e.lock.Unlock()\n\n\tapi.e.txPool.SetGasPrice((*big.Int)(\u0026gasPrice))\n\treturn true\n}\n```", 
      "externalDocs": {
        "description": "line=132", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [
        {
          "name": "gasPrice", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Big\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "miner_setRecommitInterval", 
      "tags": [], 
      "summary": "SetRecommitInterval updates the interval for miner sealing work recommitting.\n", 
      "description": "```go\n// SetRecommitInterval updates the interval for miner sealing work recommitting.\nfunc (api *PrivateMinerAPI) SetRecommitInterval(interval int) {\n\tapi.e.Miner().SetRecommitInterval(time.Duration(interval) * time.Millisecond)\n}\n```", 
      "externalDocs": {
        "description": "line=148", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [
        {
          "name": "interval", 
          "summary": "", 
          "description": "```go\nint\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "Hex representation of the integer", 
            "type": "string", 
            "title": "integer", 
            "pattern": "^0x[a-fA-F0-9]+$"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "miner_start", 
      "tags": [], 
      "summary": "Start starts the miner with the given number of threads. If threads is nil,\nthe number of workers started is equal to the number of logical CPUs that are\nusable by this process. If mining is already running, this method adjust the\nnumber of threads allowed to use and updates the minimum price required by the\ntransaction pool.\n", 
      "description": "```go\n// Start starts the miner with the given number of threads. If threads is nil,\n// the number of workers started is equal to the number of logical CPUs that are\n// usable by this process. If mining is already running, this method adjust the\n// number of threads allowed to use and updates the minimum price required by the\n// transaction pool.\nfunc (api *PrivateMinerAPI) Start(threads *int) error {\n\tif threads == nil {\n\t\treturn api.e.StartMining(runtime.NumCPU())\n\t}\n\treturn api.e.StartMining(*threads)\n}\n```", 
      "externalDocs": {
        "description": "line=110", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [
        {
          "name": "threads", 
          "summary": "", 
          "description": "```go\n*int\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of the integer", 
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "miner_stop", 
      "tags": [], 
      "summary": "Stop terminates the miner, both at the consensus engine level as well as at\nthe block creation level.\n", 
      "description": "```go\n// Stop terminates the miner, both at the consensus engine level as well as at\n// the block creation level.\nfunc (api *PrivateMinerAPI) Stop() {\n\tapi.e.StopMining()\n}\n```", 
      "externalDocs": {
        "description": "line=119", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/eth/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "net_listening", 
      "tags": [], 
      "summary": "Listening returns an indication if the node is listening for network connections.\n", 
      "description": "```go\n// Listening returns an indication if the node is listening for network connections.\nfunc (s *PublicNetAPI) Listening() bool {\n\treturn true\n}\n```", 
      "externalDocs": {
        "description": "line=1803", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "net_peerCount", 
      "tags": [], 
      "summary": "PeerCount returns the number of connected peers\n", 
      "description": "```go\n// PeerCount returns the number of connected peers\nfunc (s *PublicNetAPI) PeerCount() hexutil.Uint {\n\treturn hexutil.Uint(s.net.PeerCount())\n}\n```", 
      "externalDocs": {
        "description": "line=1807", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "hexutil.Uint", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Uint\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "Hex representation of the integer", 
          "type": "string", 
          "title": "integer", 
          "pattern": "^0x[a-fA-F0-9]+$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "net_version", 
      "tags": [], 
      "summary": "Version returns the current ethereum protocol version.\n", 
      "description": "```go\n// Version returns the current ethereum protocol version.\nfunc (s *PublicNetAPI) Version() string {\n\treturn fmt.Sprintf(\"%d\", s.networkVersion)\n}\n```", 
      "externalDocs": {
        "description": "line=1812", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "string", 
        "summary": "", 
        "description": "```go\nstring\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "string", 
          "type": "string"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "personal_deriveAccount", 
      "tags": [], 
      "summary": "DeriveAccount requests a HD wallet to derive a new account, optionally pinning\nit for later reuse.\n", 
      "description": "```go\n// DeriveAccount requests a HD wallet to derive a new account, optionally pinning\n// it for later reuse.\nfunc (s *PrivateAccountAPI) DeriveAccount(url string, path string, pin *bool) (accounts.Account, error) {\n\twallet, err := s.am.Wallet(url)\n\tif err != nil {\n\t\treturn accounts.Account{}, err\n\t}\n\tderivPath, err := accounts.ParseDerivationPath(path)\n\tif err != nil {\n\t\treturn accounts.Account{}, err\n\t}\n\tif pin == nil {\n\t\tpin = new(bool)\n\t}\n\treturn wallet.Derive(derivPath, *pin)\n}\n```", 
      "externalDocs": {
        "description": "line=293", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "url", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }, 
        {
          "name": "path", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }, 
        {
          "name": "pin", 
          "summary": "", 
          "description": "```go\n*bool\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "*bool", 
                "type": "boolean"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "accounts.Account", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/accounts.Account\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "object", 
          "properties": {
            "address": {
              "type": "string", 
              "title": "address", 
              "pattern": "^0x[a-fA-F\\d]{40}$"
            }, 
            "url": {
              "type": "object", 
              "properties": {
                "Path": {
                  "type": "string"
                }, 
                "Scheme": {
                  "type": "string"
                }
              }, 
              "additionalProperties": false
            }
          }, 
          "additionalProperties": false
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "personal_ecRecover", 
      "tags": [], 
      "summary": "EcRecover returns the address for the account that was used to create the signature.\nNote, this function is compatible with eth_sign and personal_sign. As such it recovers\nthe address of:\nhash = keccak256(\"\\x19Ethereum Signed Message:\\n\"${message length}${message})\naddr = ecrecover(hash, signature)\n\nNote, the signature must conform to the secp256k1 curve R, S and V values, where\nthe V value must be 27 or 28 for legacy reasons.\n\nhttps://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_ecRecover\n", 
      "description": "```go\n// EcRecover returns the address for the account that was used to create the signature.\n// Note, this function is compatible with eth_sign and personal_sign. As such it recovers\n// the address of:\n// hash = keccak256(\"\\x19Ethereum Signed Message:\\n\"${message length}${message})\n// addr = ecrecover(hash, signature)\n//\n// Note, the signature must conform to the secp256k1 curve R, S and V values, where\n// the V value must be 27 or 28 for legacy reasons.\n//\n// https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_ecRecover\nfunc (s *PrivateAccountAPI) EcRecover(ctx context.Context, data, sig hexutil.Bytes) (common.Address, error) {\n\tif len(sig) != crypto.SignatureLength {\n\t\treturn common.Address{}, fmt.Errorf(\"signature must be %d bytes long\", crypto.SignatureLength)\n\t}\n\tif sig[crypto.RecoveryIDOffset] != 27 \u0026\u0026 sig[crypto.RecoveryIDOffset] != 28 {\n\t\treturn common.Address{}, fmt.Errorf(\"invalid Ethereum signature (V is not 27 or 28)\")\n\t}\n\tsig[crypto.RecoveryIDOffset] -= 27\n\n\trpk, err := crypto.SigToPub(accounts.TextHash(data), sig)\n\tif err != nil {\n\t\treturn common.Address{}, err\n\t}\n\treturn crypto.PubkeyToAddress(*rpk), nil\n}\n```", 
      "externalDocs": {
        "description": "line=471", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "data", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of a 256 bit unit of data", 
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }, 
        {
          "name": "sig", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of a 256 bit unit of data", 
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "common.Address", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "github.com/ethereum/go-ethereum/common.Address", 
          "type": "string", 
          "title": "address", 
          "pattern": "^0x[a-fA-F\\d]{40}$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "personal_importRawKey", 
      "tags": [], 
      "summary": "ImportRawKey stores the given hex encoded ECDSA key into the key directory,\nencrypting it with the passphrase.\n", 
      "description": "```go\n// ImportRawKey stores the given hex encoded ECDSA key into the key directory,\n// encrypting it with the passphrase.\nfunc (s *PrivateAccountAPI) ImportRawKey(privkey string, password string) (common.Address, error) {\n\tkey, err := crypto.HexToECDSA(privkey)\n\tif err != nil {\n\t\treturn common.Address{}, err\n\t}\n\tacc, err := fetchKeystore(s.am).ImportECDSA(key, password)\n\treturn acc.Address, err\n}\n```", 
      "externalDocs": {
        "description": "line=327", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "privkey", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }, 
        {
          "name": "password", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "common.Address", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "github.com/ethereum/go-ethereum/common.Address", 
          "type": "string", 
          "title": "address", 
          "pattern": "^0x[a-fA-F\\d]{40}$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "personal_initializeWallet", 
      "tags": [], 
      "summary": "InitializeWallet initializes a new wallet at the provided URL, by generating and returning a new private key.\n", 
      "description": "```go\n// InitializeWallet initializes a new wallet at the provided URL, by generating and returning a new private key.\nfunc (s *PrivateAccountAPI) InitializeWallet(ctx context.Context, url string) (string, error) {\n\twallet, err := s.am.Wallet(url)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tentropy, err := bip39.NewEntropy(256)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tmnemonic, err := bip39.NewMnemonic(entropy)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tseed := bip39.NewSeed(mnemonic, \"\")\n\n\tswitch wallet := wallet.(type) {\n\tcase *scwallet.Wallet:\n\t\treturn mnemonic, wallet.Initialize(seed)\n\tdefault:\n\t\treturn \"\", fmt.Errorf(\"specified wallet does not support initialization\")\n\t}\n}\n```", 
      "externalDocs": {
        "description": "line=494", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "url", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "string", 
        "summary": "", 
        "description": "```go\nstring\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "string", 
          "type": "string"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "personal_listAccounts", 
      "tags": [], 
      "summary": "listAccounts will return a list of addresses for accounts this node manages.\n", 
      "description": "```go\n// listAccounts will return a list of addresses for accounts this node manages.\nfunc (s *PrivateAccountAPI) ListAccounts() []common.Address {\n\treturn s.am.Accounts()\n}\n```", 
      "externalDocs": {
        "description": "line=243", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "[]common.Address", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "string", 
                "title": "address", 
                "pattern": "^0x[a-fA-F\\d]{40}$"
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "personal_listWallets", 
      "tags": [], 
      "summary": "ListWallets will return a list of wallets this node manages.\n", 
      "description": "```go\n// ListWallets will return a list of wallets this node manages.\nfunc (s *PrivateAccountAPI) ListWallets() []rawWallet {\n\twallets := make([]rawWallet, 0)\n\tfor _, wallet := range s.am.Wallets() {\n\t\tstatus, failure := wallet.Status()\n\n\t\traw := rawWallet{\n\t\t\tURL:\t\twallet.URL().String(),\n\t\t\tStatus:\t\tstatus,\n\t\t\tAccounts:\twallet.Accounts(),\n\t\t}\n\t\tif failure != nil {\n\t\t\traw.Failure = failure.Error()\n\t\t}\n\t\twallets = append(wallets, raw)\n\t}\n\treturn wallets\n}\n```", 
      "externalDocs": {
        "description": "line=257", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "[]rawWallet", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "array", 
              "items": {
                "type": "object", 
                "properties": {
                  "accounts": {
                    "type": "array", 
                    "items": {
                      "type": "object", 
                      "properties": {
                        "address": {
                          "type": "string", 
                          "title": "address", 
                          "pattern": "^0x[a-fA-F\\d]{40}$"
                        }, 
                        "url": {
                          "type": "object", 
                          "properties": {
                            "Path": {
                              "type": "string"
                            }, 
                            "Scheme": {
                              "type": "string"
                            }
                          }, 
                          "additionalProperties": false
                        }
                      }, 
                      "additionalProperties": false
                    }
                  }, 
                  "failure": {
                    "type": "string"
                  }, 
                  "status": {
                    "type": "string"
                  }, 
                  "url": {
                    "type": "string"
                  }
                }, 
                "additionalProperties": false
              }
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "personal_lockAccount", 
      "tags": [], 
      "summary": "LockAccount will lock the account associated with the given address when it's unlocked.\n", 
      "description": "```go\n// LockAccount will lock the account associated with the given address when it's unlocked.\nfunc (s *PrivateAccountAPI) LockAccount(addr common.Address) bool {\n\treturn fetchKeystore(s.am).Lock(addr) == nil\n}\n```", 
      "externalDocs": {
        "description": "line=364", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "addr", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/common.Address", 
            "type": "string", 
            "title": "address", 
            "pattern": "^0x[a-fA-F\\d]{40}$"
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "personal_newAccount", 
      "tags": [], 
      "summary": "NewAccount will create a new account and returns the address for the new account.\n", 
      "description": "```go\n// NewAccount will create a new account and returns the address for the new account.\nfunc (s *PrivateAccountAPI) NewAccount(password string) (common.Address, error) {\n\tacc, err := fetchKeystore(s.am).NewAccount(password)\n\tif err == nil {\n\t\tlog.Info(\"Your new key was generated\", \"address\", acc.Address)\n\t\tlog.Warn(\"Please backup your key file!\", \"path\", acc.URL.Path)\n\t\tlog.Warn(\"Please remember your password!\")\n\t\treturn acc.Address, nil\n\t}\n\treturn common.Address{}, err\n}\n```", 
      "externalDocs": {
        "description": "line=309", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "password", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "common.Address", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "github.com/ethereum/go-ethereum/common.Address", 
          "type": "string", 
          "title": "address", 
          "pattern": "^0x[a-fA-F\\d]{40}$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "personal_openWallet", 
      "tags": [], 
      "summary": "OpenWallet initiates a hardware wallet opening procedure, establishing a USB\nconnection and attempting to authenticate via the provided passphrase. Note,\nthe method may return an extra challenge requiring a second open (e.g. the\nTrezor PIN matrix challenge).\n", 
      "description": "```go\n// OpenWallet initiates a hardware wallet opening procedure, establishing a USB\n// connection and attempting to authenticate via the provided passphrase. Note,\n// the method may return an extra challenge requiring a second open (e.g. the\n// Trezor PIN matrix challenge).\nfunc (s *PrivateAccountAPI) OpenWallet(url string, passphrase *string) error {\n\twallet, err := s.am.Wallet(url)\n\tif err != nil {\n\t\treturn err\n\t}\n\tpass := \"\"\n\tif passphrase != nil {\n\t\tpass = *passphrase\n\t}\n\treturn wallet.Open(pass)\n}\n```", 
      "externalDocs": {
        "description": "line=279", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "url", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }, 
        {
          "name": "passphrase", 
          "summary": "", 
          "description": "```go\n*string\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "*string", 
                "type": "string"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "personal_sendTransaction", 
      "tags": [], 
      "summary": "SendTransaction will create a transaction from the given arguments and\ntries to sign it with the key associated with args.To. If the given passwd isn't\nable to decrypt the key it fails.\n", 
      "description": "```go\n// SendTransaction will create a transaction from the given arguments and\n// tries to sign it with the key associated with args.To. If the given passwd isn't\n// able to decrypt the key it fails.\nfunc (s *PrivateAccountAPI) SendTransaction(ctx context.Context, args SendTxArgs, passwd string) (common.Hash, error) {\n\tif args.Nonce == nil {\n\n\t\ts.nonceLock.LockAddr(args.From)\n\t\tdefer s.nonceLock.UnlockAddr(args.From)\n\t}\n\tsigned, err := s.signTransaction(ctx, \u0026args, passwd)\n\tif err != nil {\n\t\tlog.Warn(\"Failed transaction send attempt\", \"from\", args.From, \"to\", args.To, \"value\", args.Value.ToInt(), \"err\", err)\n\t\treturn common.Hash{}, err\n\t}\n\treturn SubmitTransaction(ctx, s.b, signed)\n}\n```", 
      "externalDocs": {
        "description": "line=391", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "args", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.SendTxArgs\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "type": "object", 
            "properties": {
              "data": {
                "description": "Field 'input' should be preferred", 
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              "from": {
                "type": "string", 
                "title": "address", 
                "pattern": "^0x[a-fA-F\\d]{40}$"
              }, 
              "gas": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "gasPrice": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "input": {
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              "nonce": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "to": {
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }, 
              "value": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }
            }, 
            "additionalProperties": false
          }
        }, 
        {
          "name": "passwd", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "common.Hash", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "Hex representation of a Keccak 256 hash", 
          "type": "string", 
          "title": "keccak", 
          "pattern": "^0x[a-fA-F\\d]{64}$"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "personal_sign", 
      "tags": [], 
      "summary": "Sign calculates an Ethereum ECDSA signature for:\nkeccack256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))\n\nNote, the produced signature conforms to the secp256k1 curve R, S and V values,\nwhere the V value will be 27 or 28 for legacy reasons.\n\nThe key used to calculate the signature is decrypted with the given password.\n\nhttps://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n", 
      "description": "```go\n// Sign calculates an Ethereum ECDSA signature for:\n// keccack256(\"\\x19Ethereum Signed Message:\\n\" + len(message) + message))\n//\n// Note, the produced signature conforms to the secp256k1 curve R, S and V values,\n// where the V value will be 27 or 28 for legacy reasons.\n//\n// The key used to calculate the signature is decrypted with the given password.\n//\n// https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\nfunc (s *PrivateAccountAPI) Sign(ctx context.Context, data hexutil.Bytes, addr common.Address, passwd string) (hexutil.Bytes, error) {\n\n\taccount := accounts.Account{Address: addr}\n\n\twallet, err := s.b.AccountManager().Find(account)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsignature, err := wallet.SignTextWithPassphrase(account, passwd, data)\n\tif err != nil {\n\t\tlog.Warn(\"Failed data sign attempt\", \"address\", addr, \"err\", err)\n\t\treturn nil, err\n\t}\n\tsignature[crypto.RecoveryIDOffset] += 27\n\treturn signature, nil\n}\n```", 
      "externalDocs": {
        "description": "line=443", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "data", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of a 256 bit unit of data", 
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }, 
        {
          "name": "addr", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/common.Address", 
            "type": "string", 
            "title": "address", 
            "pattern": "^0x[a-fA-F\\d]{40}$"
          }
        }, 
        {
          "name": "passwd", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "hexutil.Bytes", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of a 256 bit unit of data", 
              "type": "string", 
              "title": "dataWord", 
              "pattern": "^0x([a-fA-F\\d]{64})?$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "personal_signAndSendTransaction", 
      "tags": [], 
      "summary": "SignAndSendTransaction was renamed to SendTransaction. This method is deprecated\nand will be removed in the future. It primary goal is to give clients time to update.\n", 
      "description": "```go\n// SignAndSendTransaction was renamed to SendTransaction. This method is deprecated\n// and will be removed in the future. It primary goal is to give clients time to update.\nfunc (s *PrivateAccountAPI) SignAndSendTransaction(ctx context.Context, args SendTxArgs, passwd string) (common.Hash, error) {\n\treturn s.SendTransaction(ctx, args, passwd)\n}\n```", 
      "externalDocs": {
        "description": "line=489", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "args", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.SendTxArgs\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "type": "object", 
            "properties": {
              "data": {
                "description": "Field 'input' should be preferred", 
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              "from": {
                "type": "string", 
                "title": "address", 
                "pattern": "^0x[a-fA-F\\d]{40}$"
              }, 
              "gas": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "gasPrice": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "input": {
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              "nonce": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "to": {
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }, 
              "value": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }
            }, 
            "additionalProperties": false
          }
        }, 
        {
          "name": "passwd", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "common.Hash", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common.Hash\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "Hex representation of a Keccak 256 hash", 
          "type": "string", 
          "title": "keccak", 
          "pattern": "^0x[a-fA-F\\d]{64}$"
        }
      }, 
      "deprecated": true, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "personal_signTransaction", 
      "tags": [], 
      "summary": "SignTransaction will create a transaction from the given arguments and\ntries to sign it with the key associated with args.To. If the given passwd isn't\nable to decrypt the key it fails. The transaction is returned in RLP-form, not broadcast\nto other nodes\n", 
      "description": "```go\n// SignTransaction will create a transaction from the given arguments and\n// tries to sign it with the key associated with args.To. If the given passwd isn't\n// able to decrypt the key it fails. The transaction is returned in RLP-form, not broadcast\n// to other nodes\nfunc (s *PrivateAccountAPI) SignTransaction(ctx context.Context, args SendTxArgs, passwd, passwd2 string) (*SignTransactionResult, error) {\n\n\tif args.Gas == nil {\n\t\treturn nil, fmt.Errorf(\"gas not specified\")\n\t}\n\tif args.GasPrice == nil {\n\t\treturn nil, fmt.Errorf(\"gasPrice not specified\")\n\t}\n\tif args.Nonce == nil {\n\t\treturn nil, fmt.Errorf(\"nonce not specified\")\n\t}\n\tsigned, err := s.signTransaction(ctx, \u0026args, passwd)\n\tif err != nil {\n\t\tlog.Warn(\"Failed transaction sign attempt\", \"from\", args.From, \"to\", args.To, \"value\", args.Value.ToInt(), \"err\", err)\n\t\treturn nil, err\n\t}\n\tdata, err := rlp.EncodeToBytes(signed)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn \u0026SignTransactionResult{data, signed}, nil\n}\n```", 
      "externalDocs": {
        "description": "line=410", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "args", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.SendTxArgs\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "type": "object", 
            "properties": {
              "data": {
                "description": "Field 'input' should be preferred", 
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              "from": {
                "type": "string", 
                "title": "address", 
                "pattern": "^0x[a-fA-F\\d]{40}$"
              }, 
              "gas": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "gasPrice": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "input": {
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              "nonce": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              "to": {
                "type": "string", 
                "title": "keccak", 
                "pattern": "^0x[a-fA-F\\d]{64}$"
              }, 
              "value": {
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }
            }, 
            "additionalProperties": false
          }
        }, 
        {
          "name": "passwd", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }, 
        {
          "name": "passwd2", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "*SignTransactionResult", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/internal/ethapi.*SignTransactionResult\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "type": "object", 
              "properties": {
                "raw": {
                  "type": "string", 
                  "title": "dataWord", 
                  "pattern": "^0x([a-fA-F\\d]{64})?$"
                }, 
                "tx": {
                  "type": "object", 
                  "additionalProperties": false
                }
              }, 
              "additionalProperties": false
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "personal_unlockAccount", 
      "tags": [], 
      "summary": "UnlockAccount will unlock the account associated with the given address with\nthe given password for duration seconds. If duration is nil it will use a\ndefault of 300 seconds. It returns an indication if the account was unlocked.\n", 
      "description": "```go\n// UnlockAccount will unlock the account associated with the given address with\n// the given password for duration seconds. If duration is nil it will use a\n// default of 300 seconds. It returns an indication if the account was unlocked.\nfunc (s *PrivateAccountAPI) UnlockAccount(ctx context.Context, addr common.Address, password string, duration *uint64) (bool, error) {\n\n\tif s.b.ExtRPCEnabled() \u0026\u0026 !s.b.AccountManager().Config().InsecureUnlockAllowed {\n\t\treturn false, errors.New(\"account unlock with HTTP access is forbidden\")\n\t}\n\n\tconst max = uint64(time.Duration(math.MaxInt64) / time.Second)\n\tvar d time.Duration\n\tif duration == nil {\n\t\td = 300 * time.Second\n\t} else if *duration \u003e max {\n\t\treturn false, errors.New(\"unlock duration too large\")\n\t} else {\n\t\td = time.Duration(*duration) * time.Second\n\t}\n\terr := fetchKeystore(s.am).TimedUnlock(accounts.Account{Address: addr}, password, d)\n\tif err != nil {\n\t\tlog.Warn(\"Failed account unlock attempt\", \"address\", addr, \"err\", err)\n\t}\n\treturn err == nil, err\n}\n```", 
      "externalDocs": {
        "description": "line=339", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "addr", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common.Address\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "github.com/ethereum/go-ethereum/common.Address", 
            "type": "string", 
            "title": "address", 
            "pattern": "^0x[a-fA-F\\d]{40}$"
          }
        }, 
        {
          "name": "password", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }, 
        {
          "name": "duration", 
          "summary": "", 
          "description": "```go\n*uint64\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of the integer", 
                "type": "string", 
                "title": "integer", 
                "pattern": "^0x[a-fA-F0-9]+$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "bool", 
        "summary": "", 
        "description": "```go\nbool\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "bool", 
          "type": "boolean"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "personal_unpair", 
      "tags": [], 
      "summary": "Unpair deletes a pairing between wallet and geth.\n", 
      "description": "```go\n// Unpair deletes a pairing between wallet and geth.\nfunc (s *PrivateAccountAPI) Unpair(ctx context.Context, url string, pin string) error {\n\twallet, err := s.am.Wallet(url)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tswitch wallet := wallet.(type) {\n\tcase *scwallet.Wallet:\n\t\treturn wallet.Unpair([]byte(pin))\n\tdefault:\n\t\treturn fmt.Errorf(\"specified wallet does not support pairing\")\n\t}\n}\n```", 
      "externalDocs": {
        "description": "line=521", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [
        {
          "name": "url", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }, 
        {
          "name": "pin", 
          "summary": "", 
          "description": "```go\nstring\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "description": "string", 
            "type": "string"
          }
        }
      ], 
      "result": {
        "name": "Null", 
        "summary": "", 
        "description": "", 
        "required": false, 
        "deprecated": false, 
        "schema": {
          "type": "null"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "rpc_modules", 
      "tags": [], 
      "summary": "Modules returns the list of RPC services with their version number\n", 
      "description": "```go\n// Modules returns the list of RPC services with their version number\nfunc (s *RPCService) Modules() map[string]string {\n\ts.server.services.mu.Lock()\n\tdefer s.server.services.mu.Unlock()\n\n\tmodules := make(map[string]string)\n\tfor name := range s.server.services.services {\n\t\tmodules[name] = \"1.0\"\n\t}\n\treturn modules\n}\n```", 
      "externalDocs": {
        "description": "line=202", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/rpc/server.go"
      }, 
      "params": [], 
      "result": {
        "name": "map[string]string", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "object", 
          "patternProperties": {
            ".*": {
              "type": "string"
            }
          }
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "txpool_content", 
      "tags": [], 
      "summary": "Content returns the transactions contained within the transaction pool.\n", 
      "description": "```go\n// Content returns the transactions contained within the transaction pool.\nfunc (s *PublicTxPoolAPI) Content() map[string]map[string]map[string]*RPCTransaction {\n\tcontent := map[string]map[string]map[string]*RPCTransaction{\n\t\t\"pending\":\tmake(map[string]map[string]*RPCTransaction),\n\t\t\"queued\":\tmake(map[string]map[string]*RPCTransaction),\n\t}\n\tpending, queue := s.b.TxPoolContent()\n\n\tfor account, txs := range pending {\n\t\tdump := make(map[string]*RPCTransaction)\n\t\tfor _, tx := range txs {\n\t\t\tdump[fmt.Sprintf(\"%d\", tx.Nonce())] = newRPCPendingTransaction(tx)\n\t\t}\n\t\tcontent[\"pending\"][account.Hex()] = dump\n\t}\n\n\tfor account, txs := range queue {\n\t\tdump := make(map[string]*RPCTransaction)\n\t\tfor _, tx := range txs {\n\t\t\tdump[fmt.Sprintf(\"%d\", tx.Nonce())] = newRPCPendingTransaction(tx)\n\t\t}\n\t\tcontent[\"queued\"][account.Hex()] = dump\n\t}\n\treturn content\n}\n```", 
      "externalDocs": {
        "description": "line=138", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "map[string]map[string]map[string]*RPCTransaction", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "object", 
          "patternProperties": {
            ".*": {
              "type": "object", 
              "patternProperties": {
                ".*": {
                  "type": "object", 
                  "patternProperties": {
                    ".*": {
                      "type": "object", 
                      "properties": {
                        "blockHash": {
                          "type": "string", 
                          "title": "keccak", 
                          "pattern": "^0x[a-fA-F\\d]{64}$"
                        }, 
                        "blockNumber": {
                          "type": "string", 
                          "title": "integer", 
                          "pattern": "^0x[a-fA-F0-9]+$"
                        }, 
                        "from": {
                          "type": "string", 
                          "title": "address", 
                          "pattern": "^0x[a-fA-F\\d]{40}$"
                        }, 
                        "gas": {
                          "type": "string", 
                          "title": "integer", 
                          "pattern": "^0x[a-fA-F0-9]+$"
                        }, 
                        "gasPrice": {
                          "type": "string", 
                          "title": "integer", 
                          "pattern": "^0x[a-fA-F0-9]+$"
                        }, 
                        "hash": {
                          "type": "string", 
                          "title": "keccak", 
                          "pattern": "^0x[a-fA-F\\d]{64}$"
                        }, 
                        "input": {
                          "type": "string", 
                          "title": "dataWord", 
                          "pattern": "^0x([a-fA-F\\d]{64})?$"
                        }, 
                        "nonce": {
                          "type": "string", 
                          "title": "integer", 
                          "pattern": "^0x[a-fA-F0-9]+$"
                        }, 
                        "r": {
                          "type": "string", 
                          "title": "integer", 
                          "pattern": "^0x[a-fA-F0-9]+$"
                        }, 
                        "s": {
                          "type": "string", 
                          "title": "integer", 
                          "pattern": "^0x[a-fA-F0-9]+$"
                        }, 
                        "to": {
                          "type": "string", 
                          "title": "keccak", 
                          "pattern": "^0x[a-fA-F\\d]{64}$"
                        }, 
                        "transactionIndex": {
                          "type": "string", 
                          "title": "integer", 
                          "pattern": "^0x[a-fA-F0-9]+$"
                        }, 
                        "v": {
                          "type": "string", 
                          "title": "integer", 
                          "pattern": "^0x[a-fA-F0-9]+$"
                        }, 
                        "value": {
                          "type": "string", 
                          "title": "integer", 
                          "pattern": "^0x[a-fA-F0-9]+$"
                        }
                      }, 
                      "additionalProperties": false
                    }
                  }
                }
              }
            }
          }
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "txpool_inspect", 
      "tags": [], 
      "summary": "Inspect retrieves the content of the transaction pool and flattens it into an\neasily inspectable list.\n", 
      "description": "```go\n// Inspect retrieves the content of the transaction pool and flattens it into an\n// easily inspectable list.\nfunc (s *PublicTxPoolAPI) Inspect() map[string]map[string]map[string]string {\n\tcontent := map[string]map[string]map[string]string{\n\t\t\"pending\":\tmake(map[string]map[string]string),\n\t\t\"queued\":\tmake(map[string]map[string]string),\n\t}\n\tpending, queue := s.b.TxPoolContent()\n\n\t// Define a formatter to flatten a transaction into a string\n\tvar format = func(tx *types.Transaction) string {\n\t\tif to := tx.To(); to != nil {\n\t\t\treturn fmt.Sprintf(\"%s: %v wei + %v gas × %v wei\", tx.To().Hex(), tx.Value(), tx.Gas(), tx.GasPrice())\n\t\t}\n\t\treturn fmt.Sprintf(\"contract creation: %v wei + %v gas × %v wei\", tx.Value(), tx.Gas(), tx.GasPrice())\n\t}\n\n\tfor account, txs := range pending {\n\t\tdump := make(map[string]string)\n\t\tfor _, tx := range txs {\n\t\t\tdump[fmt.Sprintf(\"%d\", tx.Nonce())] = format(tx)\n\t\t}\n\t\tcontent[\"pending\"][account.Hex()] = dump\n\t}\n\n\tfor account, txs := range queue {\n\t\tdump := make(map[string]string)\n\t\tfor _, tx := range txs {\n\t\t\tdump[fmt.Sprintf(\"%d\", tx.Nonce())] = format(tx)\n\t\t}\n\t\tcontent[\"queued\"][account.Hex()] = dump\n\t}\n\treturn content\n}\n```", 
      "externalDocs": {
        "description": "line=175", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "map[string]map[string]map[string]string", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "object", 
          "patternProperties": {
            ".*": {
              "type": "object", 
              "patternProperties": {
                ".*": {
                  "type": "object", 
                  "patternProperties": {
                    ".*": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "txpool_status", 
      "tags": [], 
      "summary": "Status returns the number of pending and queued transaction in the pool.\n", 
      "description": "```go\n// Status returns the number of pending and queued transaction in the pool.\nfunc (s *PublicTxPoolAPI) Status() map[string]hexutil.Uint {\n\tpending, queue := s.b.Stats()\n\treturn map[string]hexutil.Uint{\n\t\t\"pending\":\thexutil.Uint(pending),\n\t\t\"queued\":\thexutil.Uint(queue),\n\t}\n}\n```", 
      "externalDocs": {
        "description": "line=165", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/internal/ethapi/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "map[string]hexutil.Uint", 
        "summary": "", 
        "description": "```go\n\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "type": "object", 
          "patternProperties": {
            ".*": {
              "description": "Hex representation of the integer", 
              "type": "string", 
              "title": "integer", 
              "pattern": "^0x[a-fA-F0-9]+$"
            }
          }
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "web3_clientVersion", 
      "tags": [], 
      "summary": "ClientVersion returns the node name\n", 
      "description": "```go\n// ClientVersion returns the node name\nfunc (s *PublicWeb3API) ClientVersion() string {\n\treturn s.stack.Server().Name\n}\n```", 
      "externalDocs": {
        "description": "line=309", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/node/api.go"
      }, 
      "params": [], 
      "result": {
        "name": "string", 
        "summary": "", 
        "description": "```go\nstring\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "description": "string", 
          "type": "string"
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }, 
    {
      "name": "web3_sha3", 
      "tags": [], 
      "summary": "Sha3 applies the ethereum sha3 implementation on the input.\nIt assumes the input is hex encoded.\n", 
      "description": "```go\n// Sha3 applies the ethereum sha3 implementation on the input.\n// It assumes the input is hex encoded.\nfunc (s *PublicWeb3API) Sha3(input hexutil.Bytes) hexutil.Bytes {\n\treturn crypto.Keccak256(input)\n}\n```", 
      "externalDocs": {
        "description": "line=315", 
        "url": "file:///home/ia/go/src/github.com/ethereum/go-ethereum/node/api.go"
      }, 
      "params": [
        {
          "name": "input", 
          "summary": "", 
          "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
          "required": true, 
          "deprecated": false, 
          "schema": {
            "oneOf": [
              {
                "description": "Hex representation of a 256 bit unit of data", 
                "type": "string", 
                "title": "dataWord", 
                "pattern": "^0x([a-fA-F\\d]{64})?$"
              }, 
              {
                "type": "null"
              }
            ]
          }
        }
      ], 
      "result": {
        "name": "hexutil.Bytes", 
        "summary": "", 
        "description": "```go\ngithub.com/ethereum/go-ethereum/common/hexutil.Bytes\n```", 
        "required": true, 
        "deprecated": false, 
        "schema": {
          "oneOf": [
            {
              "description": "Hex representation of a 256 bit unit of data", 
              "type": "string", 
              "title": "dataWord", 
              "pattern": "^0x([a-fA-F\\d]{64})?$"
            }, 
            {
              "type": "null"
            }
          ]
        }
      }, 
      "deprecated": false, 
      "servers": [], 
      "errors": [], 
      "links": [], 
      "paramStructure": "by-position", 
      "examples": []
    }
  ], 
  "components": {}, 
  "externalDocs": {
    "description": "Source", 
    "url": "https://github.com/etclabscore/core-geth"
  }
}
